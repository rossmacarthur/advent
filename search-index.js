var searchIndex = JSON.parse('{\
"advent":{"doc":"This crate contains a runner and benchmarker for Advent of …","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLDNDNDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Builder","Solution","attr","attr","bench","bg","bg","black","black","blink","blink","blue","blue","bold","bold","borrow","borrow","borrow_mut","borrow_mut","bright","bright","bright_black","bright_black","bright_blue","bright_blue","bright_cyan","bright_cyan","bright_green","bright_green","bright_magenta","bright_magenta","bright_red","bright_red","bright_white","bright_white","bright_yellow","bright_yellow","build","clear","clear","cli","conceal","conceal","cyan","cyan","dim","dim","fg","fg","fixed","fixed","from","from","green","green","into","into","invert","invert","italic","italic","linger","linger","magenta","magenta","mask","mask","new","on_black","on_black","on_blue","on_blue","on_bright","on_bright","on_bright_black","on_bright_black","on_bright_blue","on_bright_blue","on_bright_cyan","on_bright_cyan","on_bright_green","on_bright_green","on_bright_magenta","on_bright_magenta","on_bright_red","on_bright_red","on_bright_white","on_bright_white","on_bright_yellow","on_bright_yellow","on_cyan","on_cyan","on_fixed","on_fixed","on_green","on_green","on_magenta","on_magenta","on_primary","on_primary","on_red","on_red","on_rgb","on_rgb","on_white","on_white","on_yellow","on_yellow","part","primary","primary","quirk","quirk","rapid_blink","rapid_blink","red","red","rgb","rgb","run","strike","strike","summary","try_from","try_from","try_into","try_into","type_id","type_id","underline","underline","whenever","whenever","white","white","wrap","wrap","yellow","yellow","Bench","Bench","Run","Run","Stats","Summary","attr","attr","attr","attr","bg","bg","bg","bg","black","black","black","black","blink","blink","blink","blink","blue","blue","blue","blue","bold","bold","bold","bold","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bright","bright","bright","bright","bright_black","bright_black","bright_black","bright_black","bright_blue","bright_blue","bright_blue","bright_blue","bright_cyan","bright_cyan","bright_cyan","bright_cyan","bright_green","bright_green","bright_green","bright_green","bright_magenta","bright_magenta","bright_magenta","bright_magenta","bright_red","bright_red","bright_red","bright_red","bright_white","bright_white","bright_white","bright_white","bright_yellow","bright_yellow","bright_yellow","bright_yellow","clear","clear","clear","clear","clone","clone_into","conceal","conceal","conceal","conceal","cyan","cyan","cyan","cyan","dim","dim","dim","dim","elapsed","fg","fg","fg","fg","fixed","fixed","fixed","fixed","fmt","fmt","fmt","fmt","from","from","from","from","green","green","green","green","into","into","into","into","invert","invert","invert","invert","italic","italic","italic","italic","linger","linger","linger","linger","magenta","magenta","magenta","magenta","mask","mask","mask","mask","max","mean","min","name","name","on_black","on_black","on_black","on_black","on_blue","on_blue","on_blue","on_blue","on_bright","on_bright","on_bright","on_bright","on_bright_black","on_bright_black","on_bright_black","on_bright_black","on_bright_blue","on_bright_blue","on_bright_blue","on_bright_blue","on_bright_cyan","on_bright_cyan","on_bright_cyan","on_bright_cyan","on_bright_green","on_bright_green","on_bright_green","on_bright_green","on_bright_magenta","on_bright_magenta","on_bright_magenta","on_bright_magenta","on_bright_red","on_bright_red","on_bright_red","on_bright_red","on_bright_white","on_bright_white","on_bright_white","on_bright_white","on_bright_yellow","on_bright_yellow","on_bright_yellow","on_bright_yellow","on_cyan","on_cyan","on_cyan","on_cyan","on_fixed","on_fixed","on_fixed","on_fixed","on_green","on_green","on_green","on_green","on_magenta","on_magenta","on_magenta","on_magenta","on_primary","on_primary","on_primary","on_primary","on_red","on_red","on_red","on_red","on_rgb","on_rgb","on_rgb","on_rgb","on_white","on_white","on_white","on_white","on_yellow","on_yellow","on_yellow","on_yellow","primary","primary","primary","primary","print","quirk","quirk","quirk","quirk","rapid_blink","rapid_blink","rapid_blink","rapid_blink","red","red","red","red","result","rgb","rgb","rgb","rgb","samples","stats","std_dev","strike","strike","strike","strike","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","underline","underline","underline","underline","whenever","whenever","whenever","whenever","white","white","white","white","wrap","wrap","wrap","wrap","yellow","yellow","yellow","yellow"],"q":[[0,"advent"],[139,"advent::summary"],[423,"yansi::attr_quirk"],[424,"yansi::paint"],[425,"core::clone"],[426,"core::panic::unwind_safe"],[427,"yansi::color"],[428,"core::ops::function"],[429,"yansi::attr_quirk"],[430,"core::any"],[431,"yansi::condition"],[432,"core::fmt"],[433,"core::fmt"]],"d":["A builder for a <code>Solution</code>.","A runner and benchmarker for an Advent of Code solution.","Enables the styling <code>Attribute</code> <code>value</code>.","Enables the styling <code>Attribute</code> <code>value</code>.","Consumes this struct and benchmarks the parts.","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","","","","","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.","Consumes the builder and produces a solution which can …","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","Parses the command line arguments and executes the run or …","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","Returns a new builder for a new Advent of Code run or …","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","Adds a part to run or benchmark.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.","Consumes this struct and runs the parts.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","","","","","","","","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","Conditionally enable styling based on whether the <code>Condition</code>…","Conditionally enable styling based on whether the <code>Condition</code>…","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.","The result of a benchmark.","","The result of a run.","","Data for a benchmark.","The summary of a set of runs or benchmarks.","Enables the styling <code>Attribute</code> <code>value</code>.","Enables the styling <code>Attribute</code> <code>value</code>.","Enables the styling <code>Attribute</code> <code>value</code>.","Enables the styling <code>Attribute</code> <code>value</code>.","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","","","","","","","","","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","","","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","How long this run took in seconds.","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","The maximum time taken in seconds for a sample.","The mean time taken in seconds for all samples.","The minimum time taken in seconds for a sample.","The name of the benchmark.","The name of the run.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.","Pretty prints the summary to stdout.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.","The output of the run.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.","The number of samples taken.","The data for the benchmark.","The standard deviation of time taken in seconds for all …","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","","","","","","","","","","","","","","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","Conditionally enable styling based on whether the <code>Condition</code>…","Conditionally enable styling based on whether the <code>Condition</code>…","Conditionally enable styling based on whether the <code>Condition</code>…","Conditionally enable styling based on whether the <code>Condition</code>…","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>."],"i":[0,0,8,3,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,8,3,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,0,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,8,3,8,3,8,3,8,3,8,3,3,8,3,0,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,0,4,0,4,0,0,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,16,16,4,19,20,16,4,19,20,16,4,19,20,16,20,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,16,16,16,19,20,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,4,19,20,16,4,19,20,16,4,19,20,16,20,4,19,20,16,16,19,16,4,19,20,16,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16,4,19,20,16],"f":[0,0,[[-1,1],[[2,[-2]]],[],[]],[[-1,1],[[2,[-2]]],[],[]],[[[3,[-1]]],4,[5,6]],[[-1,7],[[2,[-2]]],[],[]],[[-1,7],[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[[[8,[-1]]],[[3,[-1]]],[5,6]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[[[3,[-1]]],9,[5,6]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[[-1,7],[[2,[-2]]],[],[]],[[-1,7],[[2,[-2]]],[],[]],[[-1,10],[[2,[-2]]],[],[]],[[-1,10],[[2,[-2]]],[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[8,[-2]]],[11,6],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[[-1,10],[[2,[-2]]],[],[]],[[-1,10],[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[[-1,10,10,10],[[2,[-2]]],[],[]],[[-1,10,10,10],[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[[[8,[-1]],-2],[[8,[-1]]],[5,6],[11,6]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[[-1,12],[[2,[-2]]],[],[]],[[-1,12],[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[[-1,10,10,10],[[2,[-2]]],[],[]],[[-1,10,10,10],[[2,[-2]]],[],[]],[[[3,[-1]]],4,[5,6]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],0,[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[[-1,15],[[2,[-2]]],[],[]],[[-1,15],[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],0,0,0,0,0,0,[[-1,1],[[2,[-2]]],[],[]],[[-1,1],[[2,[-2]]],[],[]],[[-1,1],[[2,[-2]]],[],[]],[[-1,1],[[2,[-2]]],[],[]],[[-1,7],[[2,[-2]]],[],[]],[[-1,7],[[2,[-2]]],[],[]],[[-1,7],[[2,[-2]]],[],[]],[[-1,7],[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[16,16],[[-1,-2],9,[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],0,[[-1,7],[[2,[-2]]],[],[]],[[-1,7],[[2,[-2]]],[],[]],[[-1,7],[[2,[-2]]],[],[]],[[-1,7],[[2,[-2]]],[],[]],[[-1,10],[[2,[-2]]],[],[]],[[-1,10],[[2,[-2]]],[],[]],[[-1,10],[[2,[-2]]],[],[]],[[-1,10],[[2,[-2]]],[],[]],[[4,17],18],[[19,17],18],[[20,17],18],[[16,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],0,0,0,0,0,[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[[-1,10],[[2,[-2]]],[],[]],[[-1,10],[[2,[-2]]],[],[]],[[-1,10],[[2,[-2]]],[],[]],[[-1,10],[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[[-1,10,10,10],[[2,[-2]]],[],[]],[[-1,10,10,10],[[2,[-2]]],[],[]],[[-1,10,10,10],[[2,[-2]]],[],[]],[[-1,10,10,10],[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[4,9],[[-1,12],[[2,[-2]]],[],[]],[[-1,12],[[2,[-2]]],[],[]],[[-1,12],[[2,[-2]]],[],[]],[[-1,12],[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],0,[[-1,10,10,10],[[2,[-2]]],[],[]],[[-1,10,10,10],[[2,[-2]]],[],[]],[[-1,10,10,10],[[2,[-2]]],[],[]],[[-1,10,10,10],[[2,[-2]]],[],[]],0,0,0,[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[[-1,15],[[2,[-2]]],[],[]],[[-1,15],[[2,[-2]]],[],[]],[[-1,15],[[2,[-2]]],[],[]],[[-1,15],[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]]],"c":[],"p":[[4,"Attribute",423],[3,"Painted",424],[3,"Solution",0],[4,"Summary",139],[8,"Clone",425],[8,"UnwindSafe",426],[4,"Color",427],[3,"Builder",0],[15,"tuple"],[15,"u8"],[8,"Fn",428],[4,"Quirk",423],[4,"Result",429],[3,"TypeId",430],[3,"Condition",431],[3,"Stats",139],[3,"Formatter",432],[6,"Result",432],[3,"Bench",139],[3,"Run",139]]},\
"argh":{"doc":"Derive-based argument parsing optimized for code size and …","t":"IYSSGGIDDIDEIIYNNNEDNNIGINILLLLLLLLLLLLFLLMMKMKLLLMMMMMLLLLLLLLLLLLLMMMLLLLLLLLLLLLLKKFKLMMLLLLLLMMMMMMMMMMMLLLLLLKMMLLLLLLLKLLLLLLKLLLLLLM","n":["ArgsInfo","ArgsInfo","COMMAND","COMMANDS","CommandInfo","CommandInfoWithArgs","DynamicSubCommand","EarlyExit","ErrorCodeInfo","Flag","FlagInfo","FlagInfoKind","FromArgValue","FromArgs","FromArgs","Greedy","Option","Optional","Optionality","PositionalInfo","Repeating","Required","SubCommand","SubCommandInfo","SubCommands","Switch","TopLevelCommand","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cargo_from_env","clone","clone_into","code","command","commands","commands","default","default","default","default","description","description","description","description","description","dynamic_commands","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error_codes","examples","flags","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_arg_value","from_args","from_env","get_args_info","get_subcommands","hidden","hidden","into","into","into","into","into","into","kind","long","name","name","name","name","notes","optionality","optionality","output","positionals","redact_arg_values","serialize","serialize","serialize","serialize","serialize","set_flag","short","status","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from_args","try_into","try_into","try_into","try_into","try_into","try_into","try_redact_arg_values","type_id","type_id","type_id","type_id","type_id","type_id","arg_name"],"q":[[0,"argh"],[138,"argh::FlagInfoKind"],[139,"core::marker"],[140,"core::fmt"],[141,"core::fmt"],[142,"core::fmt"],[143,"alloc::vec"],[144,"serde::ser"],[145,"core::option"],[146,"core::any"]],"d":["Structured information about the command line arguments.","Entrypoint for <code>#[derive(ArgsInfo)]</code>.","Information about the subcommand.","Info for the commands.","Information about a particular command used for output.","Information about the command including the options and …","Trait implemented by values returned from a dynamic …","Information to display to the user about why a <code>FromArgs</code> …","Information about a documented error code.","A type which can be the receiver of a <code>Flag</code>.","Information about a flag or option.","The kind of flags.","Types which can be constructed from a single commandline …","Types which can be constructed from a set of commandline …","Entrypoint for <code>#[derive(FromArgs)]</code>.","Greedy is used for positional arguments which capture the …","option is a flag that also has an associated value. This …","Optional indicates the argument may or may not be present.","The optionality defines the requirments related to the …","Information about positional arguments","Repeating indicates the argument may appear zero or more …","Required indicates the argument is required exactly once.","A <code>FromArgs</code> implementation that represents a single …","Information about a subcommand.","A <code>FromArgs</code> implementation that can parse into one or more …","switch represents a boolean flag,","A top-level <code>FromArgs</code> implementation that is not a …","","","","","","","","","","","","","Create a <code>FromArgs</code> type from the current process’s …","","","The code value.","The information about the subcommand.","Info about supported subcommands.","The subcommands.","Creates a default instance of the flag value;","","","","A short description of the command’s functionality.","A short description of the command’s functionality.","Short description about what this code indicates.","Description of the argument.","The description of the flag.","Get a list of commands that are discovered at runtime.","","","","","","","","","","","","","Error code information","Examples of usage","Flags","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Construct the type from a commandline value, returning an …","Construct the type from an input set of arguments.","Create a <code>FromArgs</code> type from the current process’s …","Returns the argument info.","Returns the list of subcommands","Visibility in the help for this argument. <code>false</code> indicates …","Visibility in the help for this argument. <code>false</code> indicates …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The kind of flag.","The long string of the flag.","The name of the command.","The name of the command.","The subcommand name.","Name of the argument.","Notes about usage","Optionality of the argument.","The optionality of the flag.","The output to display to the user of the commandline tool.","Positional args","Get a String with just the argument names, e.g., options, …","","","","","","Sets the flag. This function is called when the flag is …","The single character short indicator for trhis flag.","Status of argument parsing.","","","","","","","","Perform the function of <code>FromArgs::from_args</code> for this …","","","","","","","Perform the function of <code>FromArgs::redact_arg_values</code> for …","","","","","","",""],"i":[0,0,25,26,0,0,0,0,0,0,0,0,0,0,0,9,8,9,0,0,9,9,0,0,0,8,0,10,12,7,2,8,9,10,12,7,2,8,9,0,2,2,10,20,27,19,28,7,8,9,4,19,10,12,7,26,10,12,7,2,8,9,10,12,7,2,8,9,19,19,19,10,12,7,2,8,9,10,12,7,2,2,8,9,29,30,0,31,31,12,7,10,12,7,2,8,9,7,7,4,19,20,12,19,12,7,2,19,30,10,12,7,8,9,28,7,2,2,10,12,7,2,8,9,27,10,12,7,2,8,9,27,10,12,7,2,8,9,32],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],-1,1],[2,2],[[-1,-2],3,[],[]],0,0,[[],[[5,[4]]]],0,[[],-1,6],[[],7],[[],8],[[],9],0,0,0,0,0,[[],[[5,[4]]]],[[10,10],11],[[12,12],11],[[7,7],11],[[2,2],11],[[8,8],11],[[9,9],11],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],0,0,0,[[10,13],[[15,[3,14]]]],[[12,13],[[15,[3,14]]]],[[7,13],[[15,[3,14]]]],[[2,13],16],[[8,13],[[15,[3,14]]]],[[9,13],[[15,[3,14]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[17,2],[-1,-1,[]],[-1,-1,[]],[18,[[15,[-1,17]]],[]],[[[5,[18]],[5,[18]]],[[15,[-1,2]]],[]],[[],-1,1],[[],19],[[],[[21,[20]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[[5,[18]],[5,[18]]],[[15,[[21,[17]],2]]]],[[10,-1],15,22],[[12,-1],15,22],[[7,-1],15,22],[[8,-1],15,22],[[9,-1],15,22],[-1,3,[]],0,0,[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[[5,[18]],[5,[18]]],[[23,[[15,[-1,2]]]]],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[[5,[18]],[5,[18]]],[[23,[[15,[[21,[17]],2]]]]]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],0],"c":[],"p":[[8,"TopLevelCommand",0],[3,"EarlyExit",0],[15,"tuple"],[6,"CommandInfo",0],[15,"slice"],[8,"Sized",139],[3,"FlagInfo",0],[4,"FlagInfoKind",0],[4,"Optionality",0],[3,"ErrorCodeInfo",0],[15,"bool"],[3,"PositionalInfo",0],[3,"Formatter",140],[3,"Error",140],[4,"Result",141],[6,"Result",140],[3,"String",142],[15,"str"],[6,"CommandInfoWithArgs",0],[6,"SubCommandInfo",0],[3,"Vec",143],[8,"Serializer",144],[4,"Option",145],[3,"TypeId",146],[8,"SubCommand",0],[8,"SubCommands",0],[8,"DynamicSubCommand",0],[8,"Flag",0],[8,"FromArgValue",0],[8,"FromArgs",0],[8,"ArgsInfo",0],[13,"Option",138]]},\
"argh_derive":{"doc":"","t":"YY","n":["ArgsInfo","FromArgs"],"q":[[0,"argh_derive"]],"d":["Entrypoint for <code>#[derive(ArgsInfo)]</code>.","Entrypoint for <code>#[derive(FromArgs)]</code>."],"i":[0,0],"f":[0,0],"c":[],"p":[]},\
"argh_shared":{"doc":"Shared functionality between argh_derive and the argh …","t":"DDDDENRNNEDNNDNLLLLLLLLLLLLLLLLLLLLMMMLLLLLMMMMMLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLMMLLLLLLLLMMMMMMMMMMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLFM","n":["CommandInfo","CommandInfoWithArgs","ErrorCodeInfo","FlagInfo","FlagInfoKind","Greedy","INDENT","Option","Optional","Optionality","PositionalInfo","Repeating","Required","SubCommandInfo","Switch","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","code","command","commands","default","default","default","default","default","description","description","description","description","description","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error_codes","examples","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hidden","hidden","into","into","into","into","into","into","into","into","kind","long","name","name","name","name","notes","optionality","optionality","positionals","serialize","serialize","serialize","serialize","serialize","serialize","serialize","short","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_description","arg_name"],"q":[[0,"argh_shared"],[135,"argh_shared::FlagInfoKind"],[136,"core::fmt"],[137,"core::fmt"],[138,"serde::ser"],[139,"core::any"],[140,"alloc::string"]],"d":["Information about a particular command used for output.","Information about the command line arguments for a given …","Information about a documented error code.","Information about a flag or option.","The kind of flags.","Greedy is used for positional arguments which capture the …","","option is a flag that also has an associated value. This …","Optional indicates the argument may or may not be present.","The optionality defines the requirments related to the …","Information about positional arguments","Repeating indicates the argument may appear zero or more …","Required indicates the argument is required exactly once.","Information about a subcommand. Dynamic subcommands do not …","switch represents a boolean flag,","","","","","","","","","","","","","","","","","","","","","The code value.","The information about the subcommand.","The subcommands.","","","","","","A short description of the command’s functionality.","A short description of the command’s functionality.","Short description about what this code indicates.","Description of the argument.","The description of the flag.","","","","","","","","","","","","","","","Error code information","Examples of usage","Flags","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Visibility in the help for this argument. <code>false</code> indicates …","Visibility in the help for this argument. <code>false</code> indicates …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The kind of flag.","The long string of the flag.","The name of the command.","The name of the command.","Name of the argument.","The subcommand name.","Notes about usage","Optionality of the argument.","The optionality of the flag.","Positional args","","","","","","","","The single character short indicator for trhis flag.","","","","","","","","","","","","","","","","","","","","","","","","","","","Write command names and descriptions to an output string.",""],"i":[0,0,0,0,0,6,0,5,6,0,0,6,6,0,5,16,1,8,9,2,4,5,6,16,1,8,9,2,4,5,6,1,2,1,2,8,2,1,1,2,4,5,6,16,1,8,9,4,1,8,9,2,4,5,6,1,8,9,2,4,5,6,1,1,1,1,8,9,2,4,5,6,16,1,8,9,2,4,5,6,9,4,16,1,8,9,2,4,5,6,4,4,16,1,9,2,1,9,4,1,1,8,9,2,4,5,6,4,1,2,16,1,8,9,2,4,5,6,16,1,8,9,2,4,5,6,16,1,8,9,2,4,5,6,0,17],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,0,[[],1],[[],2],[[],4],[[],5],[[],6],0,0,0,0,0,[[1,1],7],[[8,8],7],[[9,9],7],[[2,2],7],[[4,4],7],[[5,5],7],[[6,6],7],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],0,0,0,[[1,10],11],[[8,10],11],[[9,10],11],[[2,10],11],[[4,10],11],[[5,10],11],[[6,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[1,-1],12,13],[[8,-1],12,13],[[9,-1],12,13],[[2,-1],12,13],[[4,-1],12,13],[[5,-1],12,13],[[6,-1],12,13],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[[15,16],3],0],"c":[],"p":[[3,"CommandInfoWithArgs",0],[3,"SubCommandInfo",0],[15,"tuple"],[3,"FlagInfo",0],[4,"FlagInfoKind",0],[4,"Optionality",0],[15,"bool"],[3,"ErrorCodeInfo",0],[3,"PositionalInfo",0],[3,"Formatter",136],[6,"Result",136],[4,"Result",137],[8,"Serializer",138],[3,"TypeId",139],[3,"String",140],[3,"CommandInfo",0],[13,"Option",135]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":"NNNEDNDNNDDNNNDNEDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDCLLLLLLLLLLLLLL","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[231,"proc_macro2::extra"],[246,"proc_macro2::token_stream"],[262,"core::cmp"],[263,"core::marker"],[264,"core::convert"],[265,"core::iter::traits::collect"],[266,"core::fmt"],[267,"core::fmt"],[268,"proc_macro"],[269,"core::hash"],[270,"core::option"],[271,"alloc::string"],[272,"core::ops::range"],[273,"core::any"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,5,6,5,7,6,8,9,10,1,11,12,5,7,6,8,9,10,1,11,12,5,12,7,9,9,10,11,12,12,10,11,12,7,7,0,5,5,5,5,23,23,7,7,6,8,8,9,9,10,1,1,11,12,12,5,5,23,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,5,7,7,7,5,12,5,5,5,5,5,5,5,5,5,5,23,7,6,8,9,10,1,11,12,5,7,7,5,5,6,6,6,7,9,1,12,12,12,6,8,9,1,12,5,6,1,23,8,9,1,12,5,9,9,9,5,5,7,6,8,9,10,1,11,12,5,23,7,8,9,1,12,5,0,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,5,5,5,5,5,5,5,5,5,5,6,5,5,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[3]]],5],[[],6],[2,5],[7,7],[6,6],[8,8],[9,9],[10,10],[1,1],[11,11],[12,12],[5,5],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[12,12],14],[[],7],[9,15],[9,10],[[10,10],16],[[11,11],16],[[12,12],16],[[12,-1],16,[17,[19,[18]]]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[7,-1],13,20],[[7,-1],13,20],0,[21,5],[21,5],[22,5],[22,5],[[23,24],25],[[23,24],25],[[7,24],25],[[7,24],25],[[6,24],25],[[8,24],25],[[8,24],25],[[9,24],25],[[9,24],25],[[10,24],25],[[1,24],25],[[1,24],25],[[11,24],25],[[12,24],25],[[12,24],25],[[5,24],25],[[5,24],25],[-1,-1,[]],[26,7],[-1,-1,[]],[8,7],[27,6],[-1,-1,[]],[5,8],[1,8],[-1,-1,[]],[12,8],[9,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,20],[-1,7,20],[18,[[28,[7,23]]]],[18,[[28,[5,23]]]],[[12,-1],13,29],[30,5],[30,5],[31,5],[31,5],[32,5],[32,5],[33,5],[33,5],[34,5],[34,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,35],[7,16],[36,5],[36,5],[[6,6],[[37,[6]]]],[[6,6],6],[[],6],[[],7],[[10,7],9],[[2,11],1],[[18,6],12],[[18,6],12],[[12,12],[[37,[14]]]],[[6,6],6],[[8,6],13],[[9,6],13],[[1,6],13],[[12,6],13],[[5,6],13],[6,[[37,[38]]]],[1,11],[23,6],[8,6],[9,6],[1,6],[12,6],[5,6],[9,6],[9,6],[9,7],[18,5],[[5,-1],[[37,[6]]],[[40,[39]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],0,[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[42,5],[42,5],[43,5],[43,5],[44,5],[44,5],[45,5],[45,5],[3,5],[3,5],[6,27],[39,5],[39,5],0,[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],13,[],[]],[15,6],[[15,24],25],[-1,-1,[]],[-1,-2,[],[]],[15,6],[15,6],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[[-1,-2],13,[],[]],[[35,24],25],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,[[37,[8]]]],[35,[[13,[39,[37,[39]]]]]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]]],"c":[],"p":[[3,"Punct",0],[15,"char"],[15,"u8"],[15,"slice"],[3,"Literal",0],[3,"Span",0],[3,"TokenStream",0],[4,"TokenTree",0],[3,"Group",0],[4,"Delimiter",0],[4,"Spacing",0],[3,"Ident",0],[15,"tuple"],[4,"Ordering",262],[3,"DelimSpan",231],[15,"bool"],[8,"Sized",263],[15,"str"],[8,"AsRef",264],[8,"IntoIterator",265],[15,"f32"],[15,"f64"],[3,"LexError",0],[3,"Formatter",266],[6,"Result",266],[3,"TokenStream",267],[3,"Span",267],[4,"Result",268],[8,"Hasher",269],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter",246],[15,"isize"],[4,"Option",270],[3,"String",271],[15,"usize"],[8,"RangeBounds",272],[3,"TypeId",273],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"]]},\
"quote":{"doc":"github crates-io docs-rs","t":"IIIKKKKKOLLOOLLLLK","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"],[18,"proc_macro2"],[19,"core::convert"],[20,"core::iter::traits::collect"],[21,"core::fmt"],[22,"core::fmt"],[23,"proc_macro2"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,12,12,12,12,13,0,5,5,0,0,13,13,5,5,5],"f":[0,0,0,[[-1,-2],1,[],[[3,[2]]]],[[-1,-2],1,[],4],[[-1,-2,-3],1,[],4,5],[[-1,-2,-3],1,[],4,5],[[-1,6],7,[]],0,[-1,8,9],[-1,8,9],0,0,[-1,[[11,[10]]],[]],[-1,[[11,[10]]],[]],[-1,8,[]],[-1,8,[]],[[-1,8],1,[]]],"c":[],"p":[[15,"tuple"],[4,"TokenTree",18],[8,"Into",19],[8,"IntoIterator",20],[8,"ToTokens",0],[3,"Formatter",21],[6,"Result",21],[3,"TokenStream",18],[8,"Sized",22],[3,"Span",18],[4,"Option",23],[8,"TokenStreamExt",0],[8,"IdentFragment",0]]},\
"serde":{"doc":"Serde","t":"IYIQQQIYQQQQQQQILLLAKKKKKKKKKLKKKKKKKKKKKKKKKLKKKKKKOLLAKKKKKKLKKKKKKKKKKKKKKKKLKKKKKKKNNNIIIIQNIIQQQQQINDININNNNNINCNNNENNNQQQIILLLLLLLLKLKKLKKKKKKKKLKKKKKKKKKKKKKKKLKKKKKKLLLKLKLLLLLLLLLKLLLLLLKLKLLLKLKLLKLLLLLLLKLLKLLALKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIQQQQQQQQDQQQQQQQQIIQIQIQIQIQIQIQICLLLLLKKKKKKKKLLLLLLLLLLKKKKKKLLLKKKKKKLLLLLKKKKKLKKKKKKKKKKKKLKKKKKKKKLLLLLL","n":["Deserialize","Deserialize","Deserializer","Error","Error","Ok","Serialize","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","StdError","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","EnumAccessDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","description","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","StdError","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":[[0,"serde"],[87,"serde::de"],[265,"serde::de::value"],[1531,"serde::ser"],[1642,"core::result"],[1643,"core::iter::traits::collect"],[1644,"core::fmt"],[1645,"core::marker"],[1646,"core::option"],[1647,"core::fmt"],[1648,"core::any"],[1649,"alloc::vec"],[1650,"core::iter::traits::iterator"],[1651,"core::clone"],[1652,"core::fmt"]],"d":["A <strong>data structure</strong> that can be deserialized from any data …","Derive macro available if serde is built with …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during serialization.","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Derive macro available if serde is built with …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not expected.","The input contained a newtype variant that was not …","The input contained an <code>Option&lt;T&gt;</code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence in …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","","The input contained a <code>&amp;str</code> or <code>String</code> that was not expected.","The input contained a struct variant that was not expected.","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","","Format a message stating what data this Visitor expects to …","","Format an explanation of what data was being expected. …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to deserialize.","<code>variant</code> is called to identify which variant to deserialize.","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long as …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string is …","","The input contains a string and ownership of the string is …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&amp;str</code> with a lifetime tied to …","A deserializer holding a <code>&amp;[u8]</code>. Always calls …","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow&lt;str&gt;</code>.","A deserializer holding an <code>EnumAccess</code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&amp;str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</codeheck for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new borrowed deserializer from the given string.","","","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given borrowed …","Construct a new <code>MapDeserializer&lt;I, E&gt;</code>.","","","","","","","","","","","","","","","","Construct a new <code>SeqDeserializer&lt;I, E&gt;</code>.","Construct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>MapAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>EnumAccessDeserializer&lt;A&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during serialization.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,0,5,11,11,0,0,11,11,11,11,11,11,11,0,11,11,11,0,34,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,11,0,22,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,28,28,28,0,0,0,0,79,28,0,0,5,42,41,40,80,0,28,0,0,28,0,28,28,28,28,28,0,28,0,28,28,28,0,28,28,28,35,6,40,0,0,27,28,27,28,27,28,27,28,38,27,34,35,27,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,38,27,28,6,27,32,32,27,27,28,28,27,28,27,28,79,38,38,38,5,38,80,80,42,42,41,41,41,41,41,41,42,41,80,27,28,28,27,28,27,28,80,27,28,80,38,38,0,40,40,6,27,6,6,6,6,27,6,6,27,6,6,27,6,27,6,6,6,27,6,6,27,6,27,6,27,6,27,6,27,6,27,6,6,27,6,6,6,27,6,6,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,54,54,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,51,70,54,43,44,45,46,47,48,49,50,51,54,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,51,70,51,51,51,51,51,70,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,44,45,46,47,48,72,0,11,81,82,83,84,85,86,87,0,11,81,82,83,84,85,86,87,0,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,0,77,77,11,11,11,78,81,82,83,84,85,86,87,77,77,77,77,77,77,77,77,77,11,22,11,11,11,81,82,77,77,85,11,11,83,84,86,87,77,77,77,77,11,11,11,11,11,85,77,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,85,77,86,87,77,77,77],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],1,[],2],[[-1,-2],1,[],2],[[-1,-2],1,[],[3,4]],0,[-1,[[1,[-2]]],5,[]],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,[8,[7]],-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,[8,[7]],-2],1,[],6],[[-1,9,-2],1,[],6],[[-1,7,9,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,-2],1,[],6],0,[-1,10,[]],[-1,10,[]],0,[[-1,-2],1,[],11],[[-1,10],1,[]],[[-1,[8,[12]]],1,[]],[[-1,13],1,[]],[[-1,14],1,[]],[[-1,15],1,[]],[[-1,16],1,[]],[[-1,17],1,[]],[[-1,18],1,[]],[[-1,19],1,[]],[[-1,20],1,[]],[[-1,[21,[9]]],1,[]],[[-1,7,-2],1,[],[22,4]],[[-1,7,23,7,-2],1,[],[22,4]],[-1,1,[]],[[-1,[21,[9]]],1,[]],[[-1,-2],1,[],[22,4]],[[-1,7],1,[]],[[-1,7,9],1,[]],[[-1,7,23,7,9],1,[]],[[-1,9],1,[]],[[-1,7,9],1,[]],[[-1,7,23,7,9],1,[]],[[-1,24],1,[]],[[-1,25],1,[]],[[-1,23],1,[]],[[-1,26],1,[]],[[-1,12],1,[]],[-1,1,[]],[[-1,7],1,[]],[[-1,7,23,7],1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[28,28],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[-1,-2,3,[]],[[],27],[-1,[[1,[-2]]],5,[]],[[-1,-2],1,[],5],[-1,[[1,[27]]],5],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,[8,[7]],-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,[8,[7]],-2],1,[],6],[[-1,9,-2],1,[],6],[[-1,7,9,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,-2],1,[],6],[7,-1,[]],[[27,27],10],[[28,28],10],[[-1,30],31,[]],[[27,30],31],[[-1,30],31,[]],[[32,30],31],[[-1,30],[[1,[29,33]]],[]],[[27,30],31],[[28,30],31],[[28,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[9,32],-1,[]],[[28,32],-1,[]],[[28,32],-1,[]],[-1,10,[]],[7,-1,[]],[-1,[[1,[-2]]],[],34],[[-1,-2],1,[],35],[-1,[[1,[[21,[-2]]]]],[],34],[[-1,-2],[[1,[21]]],[],35],[-1,[[1,[[21,[[29,[-2,-3]]]]]]],[],34,34],[[-1,-2,-3],[[1,[[21,[29]]]]],[],35,35],[-1,[[1,[[21,[-2]]]]],[],34],[[-1,-2],[[1,[21]]],[],35],[-1,[[1,[-2]]],[],34],[[-1,-2],1,[],35],[-1,[[21,[9]]],[]],[-1,[[21,[9]]],[]],[[-1,[8,[7]],-2],1,[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[-1,9,-2],1,[],6],[-1,37,[]],[-1,37,[]],[-1,[[1,[29]]],[]],[[7,[8,[7]]],-1,[]],[[7,[8,[7]]],-1,[]],0,[-1,[[1,[[29,[-2]]]]],[],34],[[-1,-2],[[1,[29]]],[],35],[[-1,10],[[1,[-2]]],[],38],[[27,10],[[1,[-1]]],[]],[[-1,[8,[12]]],[[1,[-2]]],[],38],[[-1,7],[[1,[-2]]],[],38],[[-1,[39,[12]]],[[1,[-2]]],[],38],[[-1,[8,[12]]],[[1,[-2]]],[],38],[[27,[8,[12]]],[[1,[-1]]],38],[[-1,13],[[1,[-2]]],[],38],[[-1,-2],1,[],40],[[27,-1],1,40],[[-1,14],[[1,[-2]]],[],38],[[-1,15],[[1,[-2]]],[],38],[[27,15],[[1,[-1]]],[]],[[-1,16],[[1,[-2]]],[],38],[[27,16],[[1,[-1]]],[]],[[-1,17],[[1,[-2]]],[],38],[[-1,18],[[1,[-2]]],[],38],[[-1,19],[[1,[-2]]],[],38],[[27,19],[[1,[-1]]],[]],[[-1,20],[[1,[-2]]],[],38],[[-1,-2],1,[],41],[[27,-1],1,41],[[-1,-2],1,[],5],[[27,-1],1,5],[-1,[[1,[-2]]],[],38],[27,[[1,[-1]]],[]],[[-1,-2],1,[],42],[[27,-1],1,42],[[-1,-2],1,[],5],[[27,-1],1,5],[[-1,7],[[1,[-2]]],[],38],[[27,7],[[1,[-1]]],38],[[-1,36],[[1,[-2]]],[],38],[[-1,24],[[1,[-2]]],[],38],[[27,24],[[1,[-1]]],[]],[[-1,25],[[1,[-2]]],[],38],[[-1,23],[[1,[-2]]],[],38],[[-1,26],[[1,[-2]]],[],38],[[27,26],[[1,[-1]]],[]],[[-1,12],[[1,[-2]]],[],38],[-1,[[1,[-2]]],[],38],[27,[[1,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1]]],[[43,[-1]]],[]],[[[44,[-1]]],[[44,[-1]]],[]],[[[45,[-1]]],[[45,[-1]]],[]],[[[46,[-1]]],[[46,[-1]]],[]],[[[47,[-1]]],[[47,[-1]]],[]],[[[48,[-1]]],[[48,[-1]]],[]],[[[49,[-1]]],[[49,[-1]]],[]],[[[50,[-1]]],[[50,[-1]]],[]],[[[51,[-1,-2]]],[[51,[-1,-2]]],[52,53],[]],[54,54],[[[55,[-1]]],[[55,[-1]]],[]],[[[56,[-1]]],[[56,[-1]]],[]],[[[57,[-1]]],[[57,[-1]]],[]],[[[58,[-1]]],[[58,[-1]]],[]],[[[59,[-1]]],[[59,[-1]]],[]],[[[60,[-1]]],[[60,[-1]]],[]],[[[61,[-1]]],[[61,[-1]]],[]],[[[62,[-1]]],[[62,[-1]]],[]],[[[63,[-1]]],[[63,[-1]]],[]],[[[64,[-1]]],[[64,[-1]]],[]],[[[65,[-1]]],[[65,[-1]]],[]],[[[66,[-1]]],[[66,[-1]]],[]],[[[67,[-1]]],[[67,[-1]]],[]],[[[68,[-1]]],[[68,[-1]]],[]],[[[69,[-1]]],[[69,[-1]]],[]],[[[70,[-1,-2]]],[[70,[-1,-2]]],53,53],[[[71,[-1]]],[[71,[-1]]],53],[[[72,[-1]]],[[72,[-1]]],53],[[[73,[-1]]],[[73,[-1]]],53],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[-1,54,3],[-1,54,3],[54,7],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],7,[8,[7]],-2],1,38,6],[[[44,[-1]],7,[8,[7]],-2],1,38,6],[[[45,[-1]],7,[8,[7]],-2],1,38,6],[[[46,[-1]],7,[8,[7]],-2],1,38,6],[[[47,[-1]],7,[8,[7]],-2],1,38,6],[[[48,[-1]],7,[8,[7]],-2],1,38,6],[[[49,[-1]],7,[8,[7]],-2],1,38,6],[[[50,[-1]],7,[8,[7]],-2],1,38,6],[[[51,[-1,-2]],7,[8,[7]],-3],1,52,38,6],[[[55,[-1]],7,[8,[7]],-2],1,38,6],[[[56,[-1]],7,[8,[7]],-2],1,38,6],[[[57,[-1]],7,[8,[7]],-2],1,38,6],[[[58,[-1]],7,[8,[7]],-2],1,38,6],[[[59,[-1]],7,[8,[7]],-2],1,38,6],[[[60,[-1]],7,[8,[7]],-2],1,38,6],[[[61,[-1]],7,[8,[7]],-2],1,38,6],[[[62,[-1]],7,[8,[7]],-2],1,38,6],[[[63,[-1]],7,[8,[7]],-2],1,38,6],[[[64,[-1]],7,[8,[7]],-2],1,38,6],[[[65,[-1]],7,[8,[7]],-2],1,38,6],[[[66,[-1]],7,[8,[7]],-2],1,38,6],[[[67,[-1]],7,[8,[7]],-2],1,38,6],[[[68,[-1]],7,[8,[7]],-2],1,38,6],[[[69,[-1]],7,[8,[7]],-2],1,38,6],[[[70,[-1,-2]],7,[8,[7]],-3],1,52,38,6],[[[71,[-1]],7,[8,[7]],-2],1,42,6],[[[72,[-1]],7,[8,[7]],-2],1,41,6],[[[73,[-1]],7,[8,[7]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],7,-2],1,38,6],[[[44,[-1]],7,-2],1,38,6],[[[45,[-1]],7,-2],1,38,6],[[[46,[-1]],7,-2],1,38,6],[[[47,[-1]],7,-2],1,38,6],[[[48,[-1]],7,-2],1,38,6],[[[49,[-1]],7,-2],1,38,6],[[[50,[-1]],7,-2],1,38,6],[[[51,[-1,-2]],7,-3],1,52,38,6],[[[55,[-1]],7,-2],1,38,6],[[[56,[-1]],7,-2],1,38,6],[[[57,[-1]],7,-2],1,38,6],[[[58,[-1]],7,-2],1,38,6],[[[59,[-1]],7,-2],1,38,6],[[[60,[-1]],7,-2],1,38,6],[[[61,[-1]],7,-2],1,38,6],[[[62,[-1]],7,-2],1,38,6],[[[63,[-1]],7,-2],1,38,6],[[[64,[-1]],7,-2],1,38,6],[[[65,[-1]],7,-2],1,38,6],[[[66,[-1]],7,-2],1,38,6],[[[67,[-1]],7,-2],1,38,6],[[[68,[-1]],7,-2],1,38,6],[[[69,[-1]],7,-2],1,38,6],[[[70,[-1,-2]],7,-3],1,52,38,6],[[[71,[-1]],7,-2],1,42,6],[[[72,[-1]],7,-2],1,41,6],[[[73,[-1]],7,-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],7,[8,[7]],-2],1,38,6],[[[44,[-1]],7,[8,[7]],-2],1,38,6],[[[45,[-1]],7,[8,[7]],-2],1,38,6],[[[46,[-1]],7,[8,[7]],-2],1,38,6],[[[47,[-1]],7,[8,[7]],-2],1,38,6],[[[48,[-1]],7,[8,[7]],-2],1,38,6],[[[49,[-1]],7,[8,[7]],-2],1,38,6],[[[50,[-1]],7,[8,[7]],-2],1,38,6],[[[51,[-1,-2]],7,[8,[7]],-3],1,52,38,6],[[[55,[-1]],7,[8,[7]],-2],1,38,6],[[[56,[-1]],7,[8,[7]],-2],1,38,6],[[[57,[-1]],7,[8,[7]],-2],1,38,6],[[[58,[-1]],7,[8,[7]],-2],1,38,6],[[[59,[-1]],7,[8,[7]],-2],1,38,6],[[[60,[-1]],7,[8,[7]],-2],1,38,6],[[[61,[-1]],7,[8,[7]],-2],1,38,6],[[[62,[-1]],7,[8,[7]],-2],1,38,6],[[[63,[-1]],7,[8,[7]],-2],1,38,6],[[[64,[-1]],7,[8,[7]],-2],1,38,6],[[[65,[-1]],7,[8,[7]],-2],1,38,6],[[[66,[-1]],7,[8,[7]],-2],1,38,6],[[[67,[-1]],7,[8,[7]],-2],1,38,6],[[[68,[-1]],7,[8,[7]],-2],1,38,6],[[[69,[-1]],7,[8,[7]],-2],1,38,6],[[[70,[-1,-2]],7,[8,[7]],-3],1,52,38,6],[[[71,[-1]],7,[8,[7]],-2],1,42,6],[[[72,[-1]],7,[8,[7]],-2],1,41,6],[[[73,[-1]],7,[8,[7]],-2],1,40,6],[[[43,[-1]],9,-2],1,38,6],[[[44,[-1]],9,-2],1,38,6],[[[45,[-1]],9,-2],1,38,6],[[[46,[-1]],9,-2],1,38,6],[[[47,[-1]],9,-2],1,38,6],[[[48,[-1]],9,-2],1,38,6],[[[49,[-1]],9,-2],1,38,6],[[[50,[-1]],9,-2],1,38,6],[[[51,[-1,-2]],9,-3],1,52,38,6],[[[55,[-1]],9,-2],1,38,6],[[[56,[-1]],9,-2],1,38,6],[[[57,[-1]],9,-2],1,38,6],[[[58,[-1]],9,-2],1,38,6],[[[59,[-1]],9,-2],1,38,6],[[[60,[-1]],9,-2],1,38,6],[[[61,[-1]],9,-2],1,38,6],[[[62,[-1]],9,-2],1,38,6],[[[63,[-1]],9,-2],1,38,6],[[[64,[-1]],9,-2],1,38,6],[[[65,[-1]],9,-2],1,38,6],[[[66,[-1]],9,-2],1,38,6],[[[67,[-1]],9,-2],1,38,6],[[[68,[-1]],9,-2],1,38,6],[[[69,[-1]],9,-2],1,38,6],[[[70,[-1,-2]],9,-3],1,52,38,6],[[[71,[-1]],9,-2],1,42,6],[[[72,[-1]],9,-2],1,41,6],[[[73,[-1]],9,-2],1,40,6],[[[43,[-1]],7,9,-2],1,38,6],[[[44,[-1]],7,9,-2],1,38,6],[[[45,[-1]],7,9,-2],1,38,6],[[[46,[-1]],7,9,-2],1,38,6],[[[47,[-1]],7,9,-2],1,38,6],[[[48,[-1]],7,9,-2],1,38,6],[[[49,[-1]],7,9,-2],1,38,6],[[[50,[-1]],7,9,-2],1,38,6],[[[51,[-1,-2]],7,9,-3],1,52,38,6],[[[55,[-1]],7,9,-2],1,38,6],[[[56,[-1]],7,9,-2],1,38,6],[[[57,[-1]],7,9,-2],1,38,6],[[[58,[-1]],7,9,-2],1,38,6],[[[59,[-1]],7,9,-2],1,38,6],[[[60,[-1]],7,9,-2],1,38,6],[[[61,[-1]],7,9,-2],1,38,6],[[[62,[-1]],7,9,-2],1,38,6],[[[63,[-1]],7,9,-2],1,38,6],[[[64,[-1]],7,9,-2],1,38,6],[[[65,[-1]],7,9,-2],1,38,6],[[[66,[-1]],7,9,-2],1,38,6],[[[67,[-1]],7,9,-2],1,38,6],[[[68,[-1]],7,9,-2],1,38,6],[[[69,[-1]],7,9,-2],1,38,6],[[[70,[-1,-2]],7,9,-3],1,52,38,6],[[[71,[-1]],7,9,-2],1,42,6],[[[72,[-1]],7,9,-2],1,41,6],[[[73,[-1]],7,9,-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],7,-2],1,38,6],[[[44,[-1]],7,-2],1,38,6],[[[45,[-1]],7,-2],1,38,6],[[[46,[-1]],7,-2],1,38,6],[[[47,[-1]],7,-2],1,38,6],[[[48,[-1]],7,-2],1,38,6],[[[49,[-1]],7,-2],1,38,6],[[[50,[-1]],7,-2],1,38,6],[[[51,[-1,-2]],7,-3],1,52,38,6],[[[55,[-1]],7,-2],1,38,6],[[[56,[-1]],7,-2],1,38,6],[[[57,[-1]],7,-2],1,38,6],[[[58,[-1]],7,-2],1,38,6],[[[59,[-1]],7,-2],1,38,6],[[[60,[-1]],7,-2],1,38,6],[[[61,[-1]],7,-2],1,38,6],[[[62,[-1]],7,-2],1,38,6],[[[63,[-1]],7,-2],1,38,6],[[[64,[-1]],7,-2],1,38,6],[[[65,[-1]],7,-2],1,38,6],[[[66,[-1]],7,-2],1,38,6],[[[67,[-1]],7,-2],1,38,6],[[[68,[-1]],7,-2],1,38,6],[[[69,[-1]],7,-2],1,38,6],[[[70,[-1,-2]],7,-3],1,52,38,6],[[[71,[-1]],7,-2],1,42,6],[[[72,[-1]],7,-2],1,41,6],[[[73,[-1]],7,-2],1,40,6],[[[51,[-1,-2]]],[[1,[29,-2]]],52,38],[[[70,[-1,-2]]],[[1,[29,-2]]],52,38],[[54,54],10],[[[43,[-1]],30],31,[]],[[[44,[-1]],30],31,[]],[[[45,[-1]],30],31,[]],[[[46,[-1]],30],31,[]],[[[47,[-1]],30],31,[]],[[[48,[-1]],30],31,[]],[[[49,[-1]],30],31,[]],[[[50,[-1]],30],31,[]],[[[51,[-1,-2]],30],31,[52,74],[]],[[54,30],31],[[54,30],31],[[[55,[-1]],30],31,[]],[[[56,[-1]],30],31,[]],[[[57,[-1]],30],31,[]],[[[58,[-1]],30],31,[]],[[[59,[-1]],30],31,[]],[[[60,[-1]],30],31,[]],[[[61,[-1]],30],31,[]],[[[62,[-1]],30],31,[]],[[[63,[-1]],30],31,[]],[[[64,[-1]],30],31,[]],[[[65,[-1]],30],31,[]],[[[66,[-1]],30],31,[]],[[[67,[-1]],30],31,[]],[[[68,[-1]],30],31,[]],[[[69,[-1]],30],31,[]],[[[70,[-1,-2]],30],31,74,[]],[[[71,[-1]],30],31,74],[[[72,[-1]],30],31,74],[[[73,[-1]],30],31,74],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[43,[-1]]],[]],[23,[[44,[-1]]],[]],[7,[[45,[-1]]],[]],[7,[[46,[-1]]],[]],[36,[[47,[-1]]],[]],[[[75,[7]]],[[48,[-1]]],[]],[[[8,[12]]],[[49,[-1]]],[]],[[[8,[12]]],[[50,[-1]]],[]],[-1,[[51,[-1,-2]]],52,[]],[10,[[55,[-1]]],[]],[20,[[56,[-1]]],[]],[17,[[57,[-1]]],[]],[18,[[58,[-1]]],[]],[19,[[59,[-1]]],[]],[16,[[60,[-1]]],[]],[76,[[61,[-1]]],[]],[12,[[62,[-1]]],[]],[25,[[63,[-1]]],[]],[26,[[64,[-1]]],[]],[24,[[65,[-1]]],[]],[9,[[66,[-1]]],[]],[14,[[67,[-1]]],[]],[15,[[68,[-1]]],[]],[13,[[69,[-1]]],[]],[-1,[[70,[-1,-2]]],52,[]],[-1,[[71,[-1]]],[]],[-1,[[72,[-1]]],[]],[-1,[[73,[-1]]],[]],[[[51,[-1,-2]],-3],[[1,[21]]],52,38,35],[[[70,[-1,-2]],-3],[[1,[21]]],52,38,35],[[[51,[-1,-2]],-3,-4],[[1,[[21,[29]]]]],52,38,35,35],[[[51,[-1,-2]],-3],[[1,[21]]],52,38,35],[[[51,[-1,-2]],-3],1,52,38,35],[[[51,[-1,-2]]],[[21,[9]]],52,38],[[[51,[-1,-2]]],[[21,[9]]],52,38],[[[70,[-1,-2]]],[[21,[9]]],52,38],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[[[44,[-1]],-2],[[1,[29]]],38,35],[[[45,[-1]],-2],[[1,[29]]],38,35],[[[46,[-1]],-2],[[1,[29]]],38,35],[[[47,[-1]],-2],[[1,[29]]],38,35],[[[48,[-1]],-2],[[1,[29]]],38,35],[[[72,[-1]],-2],[[1,[29]]],41,35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],1,[],2],[[-1,-2],1,[],2],[[-1,-2],1,[],[3,4]],[-1,-2,3,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[-1,-1,[]],[-1,-2,[],[]],[-1,10,[]],[[-1,-2],1,[],11],[[-1,10],1,[]],[[-1,[8,[12]]],1,[]],[[-1,13],1,[]],[[-1,-2],[[1,[29]]],[],[22,4]],[[-1,-2],[[1,[29]]],[],[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[-1,-2,-3],[[1,[29]]],[],[22,4],[22,4]],[[-1,14],1,[]],[[-1,15],1,[]],[[-1,-2],[[1,[29]]],[],[22,4]],[[-1,-2],[[1,[29]]],[],[22,4]],[[-1,7,-2],[[1,[29]]],[],[22,4]],[[-1,7,-2],[[1,[29]]],[],[22,4]],[[[77,[-1,-2]],7,-3],[[1,[29,-2]]],[],78,[22,4]],[[[77,[-1,-2]],7,-3],[[1,[29,-2]]],[],78,[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[-1,16],1,[]],[[-1,17],1,[]],[[-1,18],1,[]],[[-1,19],1,[]],[[-1,20],1,[]],[[-1,-2],[[1,[29]]],[],[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[-1,[21,[9]]],1,[]],[[-1,7,-2],1,[],[22,4]],[[-1,7,23,7,-2],1,[],[22,4]],[-1,1,[]],[[-1,[21,[9]]],1,[]],[[-1,-2],1,[],[22,4]],[[-1,7],1,[]],[[-1,7,9],1,[]],[[-1,7,23,7,9],1,[]],[[-1,9],1,[]],[[-1,7,9],1,[]],[[-1,7,23,7,9],1,[]],[[-1,24],1,[]],[[-1,25],1,[]],[[-1,23],1,[]],[[-1,26],1,[]],[[-1,12],1,[]],[-1,1,[]],[[-1,7],1,[]],[[-1,7,23,7],1,[]],[[-1,-2],[[1,[29]]],[],[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[-1,7],[[1,[29]]],[]],[[-1,7],[[1,[29]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,37,[]]],"c":[],"p":[[4,"Result",1642],[8,"IntoIterator",1643],[8,"Display",1644],[8,"Sized",1645],[8,"Deserializer",0],[8,"Visitor",87],[15,"str"],[15,"slice"],[15,"usize"],[15,"bool"],[8,"Serializer",0],[15,"u8"],[15,"char"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[4,"Option",1646],[8,"Serialize",0],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[3,"IgnoredAny",87],[4,"Unexpected",87],[15,"tuple"],[3,"Formatter",1644],[6,"Result",1644],[8,"Expected",87],[3,"Error",1644],[8,"Deserialize",0],[8,"DeserializeSeed",87],[3,"String",1647],[3,"TypeId",1648],[8,"Error",87],[3,"Vec",1649],[8,"EnumAccess",87],[8,"MapAccess",87],[8,"SeqAccess",87],[3,"UnitDeserializer",265],[3,"U32Deserializer",265],[3,"StrDeserializer",265],[3,"BorrowedStrDeserializer",265],[3,"StringDeserializer",265],[3,"CowStrDeserializer",265],[3,"BytesDeserializer",265],[3,"BorrowedBytesDeserializer",265],[3,"MapDeserializer",265],[8,"Iterator",1650],[8,"Clone",1651],[3,"Error",265],[3,"BoolDeserializer",265],[3,"I8Deserializer",265],[3,"I16Deserializer",265],[3,"I32Deserializer",265],[3,"I64Deserializer",265],[3,"I128Deserializer",265],[3,"IsizeDeserializer",265],[3,"U8Deserializer",265],[3,"U16Deserializer",265],[3,"U64Deserializer",265],[3,"U128Deserializer",265],[3,"UsizeDeserializer",265],[3,"F32Deserializer",265],[3,"F64Deserializer",265],[3,"CharDeserializer",265],[3,"SeqDeserializer",265],[3,"SeqAccessDeserializer",265],[3,"MapAccessDeserializer",265],[3,"EnumAccessDeserializer",265],[8,"Debug",1644],[4,"Cow",1652],[15,"isize"],[3,"Impossible",1531],[8,"Error",1531],[8,"IntoDeserializer",87],[8,"VariantAccess",87],[8,"SerializeSeq",1531],[8,"SerializeTuple",1531],[8,"SerializeTupleStruct",1531],[8,"SerializeTupleVariant",1531],[8,"SerializeMap",1531],[8,"SerializeStruct",1531],[8,"SerializeStructVariant",1531]]},\
"serde_derive":{"doc":"This crate provides Serde’s two derive macros.","t":"YY","n":["Deserialize","Serialize"],"q":[[0,"serde_derive"]],"d":["",""],"i":[0,0],"f":[0,0],"c":[],"p":[]},\
"syn":{"doc":"github crates-io docs-rs","t":"DNNNNDNNNDNDNNEDNNDDENNNNNNNNNDNNNNNNNNNNNNDDNNNEDDDNNDNNNNNDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDNEEDDNNNEEDNNNDNDNDNNNNNNNNDNNNNDNENDDDDDDDNNDNNENNEEDDNNNNNNNNNNNNNNNNNNNNDDNNNEDDDNNDNNNNNNNNGNENNNNNNENNNNONDENNNNNDENNNNDDDDDDDDDEDDDDDDDENNNNNNDNNNNDEDENNMMMMMMMMLMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMOMMMMOALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLMMOOMLLLMMMMMMMMMMMMMMMMLLLLLMMMMMLLLLMMMMMAMMMMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLMMMMMMLLLLMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMMMLMMMMLMMMMMMMLMAMMMMMMMMMLLLLLLLLLLLLMMMMMMMMMMMMMMOAFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLOLLLLLOOFLLLLLLMMMMMMMMMMMAMMLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMALMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMLLLLLMMMMMMMMMLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKSKDLLLLMLLFMLLLLNDDDNQIDGIIGDLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIKKNDDDDEDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDIDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Abi","Add","AddAssign","And","AngleBracketed","AngleBracketedGenericArguments","Array","Array","Assign","AssocConst","AssocConst","AssocType","AssocType","Async","AttrStyle","Attribute","Await","BareFn","BareFnArg","BareVariadic","BinOp","Binary","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Block","Bool","BoundLifetimes","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closure","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivAssign","Enum","Eq","Err","Error","Expr","ExprArray","ExprAssign","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprConst","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprInfer","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","Field","Field","FieldMutability","Fields","FieldsNamed","FieldsUnnamed","Float","ForLoop","Ge","GenericArgument","GenericParam","Generics","Group","Group","Gt","Ident","If","ImplGenerics","ImplTrait","Index","Index","Infer","Infer","Inherited","Inner","Int","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeParam","List","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Loop","Lt","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","MetaList","MetaNameValue","MethodCall","Mul","MulAssign","NameValue","Named","Named","Ne","Neg","Never","None","None","None","Not","Ok","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Path","Path","Path","Path","PathArguments","PathSegment","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Raw","Reference","Reference","Rem","RemAssign","Repeat","Restricted","Result","Return","ReturnType","Shl","ShlAssign","Shr","ShrAssign","Slice","Str","StrStyle","Struct","Struct","Sub","SubAssign","Token","Trait","TraitBound","TraitBoundModifier","TraitObject","Try","TryBlock","Tuple","Tuple","Turbofish","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","UnOp","Unary","Union","Unit","Unnamed","Unnamed","Unsafe","Variant","Verbatim","Verbatim","Verbatim","Verbatim","VisRestricted","Visibility","WhereClause","WherePredicate","While","Yield","abi","and_token","apostrophe","args","args","arguments","as_token","as_token","as_turbofish","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","bang_token","bang_token","base","base10_digits","base10_digits","base10_parse","base10_parse","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","buffer","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","const_params","const_params_mut","const_token","const_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","delimiter","delimiter","discriminant","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","equivalent","equivalent","equivalent","equivalent","expr","expr","expr","expr","expr","ext","extern_token","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","hash","hash","hash","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","impl_token","in_token","index","index","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","iter","iter_mut","leading_colon","left","len","len","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","lit","lt_token","lt_token","lt_token","lt_token","mac","mac","make_where_clause","member","meta","meta","modifier","mutability","mutability","mutability","name","name","name","named","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args","parse_args_with","parse_args_with","parse_body","parse_body_with","parse_inner","parse_macro_input","parse_mod_style","parse_named","parse_nested_meta","parse_nested_meta","parse_outer","parse_quote","parse_quote_spanned","parse_str","parse_unnamed","parse_with","partial_cmp","partial_cmp","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","punctuated","qself","qself","require_ident","require_list","require_name_value","require_path_only","right","segments","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","struct_token","style","suffix","suffix","suffix","suffix","suffix","suffix","suffix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","underscore_token","union_token","unnamed","unraw","unsafety","value","value","value","value","value","value","value","value","variadic","variants","vis","vis","where_clause","where_token","without_plus","without_plus","without_plus","without_plus","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","equivalent","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","ParseNestedMeta","borrow","borrow_mut","error","from","input","into","parse_nested_meta","parser","path","try_from","try_into","type_id","value","Err","Error","Lookahead1","Nothing","Ok","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_any_delimiter","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AnyDelimiter","Speculative","advance_to","parse_any_delimiter","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","pop_punct","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","And","AndAnd","AndEq","As","Async","At","Auto","Await","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Comma","Const","Continue","Crate","Default","Do","Dollar","Dot","DotDot","DotDotDot","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Minus","MinusEq","Mod","Move","Mut","Ne","Not","Or","OrEq","OrOr","Override","Paren","PathSep","Percent","PercentEq","Plus","PlusEq","Pound","Priv","Pub","Question","RArrow","Ref","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Slash","SlashEq","Star","StarEq","Static","Struct","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"syn"],[2089,"syn::buffer"],[2124,"syn::ext"],[2128,"syn::meta"],[2142,"syn::parse"],[2238,"syn::parse::discouraged"],[2242,"syn::punctuated"],[2404,"syn::spanned"],[2406,"syn::token"],[4091,"core::str::traits"],[4092,"core::cmp"],[4093,"core::convert"],[4094,"core::marker"],[4095,"core::fmt"],[4096,"core::fmt"],[4097,"core::fmt"],[4098,"core::convert"],[4099,"core::hash"],[4100,"proc_macro2"],[4101,"proc_macro2"],[4102,"core::ops::function"],[4103,"proc_macro2::extra"],[4104,"alloc::string"],[4105,"core::any"],[4106,"proc_macro2"],[4107,"proc_macro2"],[4108,"core::ops::function"],[4109,"core::default"]],"d":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","An equality constraint on an associated constant: the …","An equality constraint on an associated constant: the …","A binding (equality constraint) on an associated type: the …","A binding (equality constraint) on an associated type: the …","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute, like <code>#[repr(transparent)]</code>.","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","The variadic argument of a function pointer like …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","","The <code>==</code> operator (equality)","Contains the error value","Error returned when a Syn parser cannot parse the input …","A Rust expression.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","A blocked scope: <code>{ ... }</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Unused, but reserved for RFC 3323 restrictions.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A for loop: <code>for pat in expr { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","An expression contained within invisible delimiters.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","A word of Rust code, which may be a keyword or legal …","An <code>if</code> expression with an optional <code>else</code> block: …","Returned by <code>Generics::split_for_impl</code>.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime parameter: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","The never type: <code>!</code>.","","","","The <code>!</code> operator for logical inversion","Contains the success value","The <code>||</code> operator (logical or)","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A raw string like <code>r##&quot;data&quot;##</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An array literal constructed from one repeated element: …","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A dynamically sized slice type: <code>[T]</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type argument.","A particular type is returned.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","An enum variant.","Tokens in expression position not interpreted by Syn.","","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","Parse a set of curly braces and expose their content to …","","","","","Parse a set of square brackets and expose their content to …","A stably addressed token buffer supporting efficient …eturns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","","","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extension traits to provide parsing methods on foreign …","","Content stored in the variant.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","If this path consists of a single ident, returns the ident.","","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","","","","","","","","","","<code>(A, B)</code>","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","Returns the number of fields.","","","","","Returns an Iterator&lt;Item = &amp;LifetimeParam&gt; over the …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeParam&gt; over the …","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","Facility for interpreting structured content inside of an …","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","<code>C</code>","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","See <code>Attribute::parse_args</code>.","Parse the arguments to the attribute using the given …","See <code>Attribute::parse_args_with</code>.","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parse the arguments to the attribute, expecting it to …","See <code>Attribute::parse_nested_meta</code>.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","","","Returns the path that identifies the interpretation of …","Returns the path that begins this structured meta item.","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","An error if this path is not a single ident, as defined in …","Error if this is a <code>Meta::Path</code> or <code>Meta::NameValue</code>.","Error if this is a <code>Meta::Path</code> or <code>Meta::List</code>.","Error if this is a <code>Meta::List</code> or <code>Meta::NameValue</code>.","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","Returns the span of this <code>Ident</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A trait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tokens representing Rust punctuation, keywords, and …eturns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","In some positions, types may not contain the <code>+</code> character, …","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Context for parsing a single property in the conventional …","","","Report that the attribute’s content did not conform to …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Used when parsing <code>list(...)</code> syntax <strong>if</strong> the content inside …","Make a parser that is usable with <code>parse_macro_input!</code> in a …","","","","","Used when parsing <code>key = &quot;value&quot;</code> syntax.","Contains the error value","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","Contains the success value","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","The source location of the error.","Returns the <code>Span</code> of the next token in the parse stream, or …","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support manipulating …","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","Returns the delimiter, the span of the delimiter token, …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","<strong>A punctuated sequence of syntax tree nodes of type <code>T</code> </strong>…","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Removes the trailing punctuation from this punctuated …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>become</code>","<code>box</code>","<code>{</code>…<code>}</code>","<code>[</code>…<code>]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>-</code>","<code>-=</code>","<code>mod</code>","<code>move</code>","<code>mut</code>","<code>!=</code>","<code>!</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(</code>…<code>)</code>","<code>::</code>","<code>%</code>","<code>%=</code>","<code>+</code>","<code>+=</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>/</code>","<code>/=</code>","<code>*</code>","<code>*=</code>","<code>static</code>","<code>struct</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,61,61,61,65,0,26,76,26,0,66,0,66,26,0,0,26,76,0,0,0,26,61,61,61,61,61,61,26,53,0,60,60,26,53,53,26,26,53,26,26,41,66,0,0,66,26,281,0,0,0,0,94,62,0,61,61,22,61,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,0,53,26,61,0,0,0,26,76,61,0,26,0,76,0,26,26,76,73,12,53,61,26,0,41,46,50,66,0,13,0,26,0,0,0,0,0,0,0,26,61,0,26,76,0,26,48,0,0,0,0,26,61,61,13,17,38,61,62,76,48,65,75,62,6,61,12,26,60,76,65,0,0,13,26,76,0,0,0,0,76,73,0,26,281,26,76,61,61,26,73,0,26,0,61,61,61,61,76,53,0,22,26,61,61,0,46,0,0,76,26,26,26,76,0,0,41,50,66,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,22,17,17,38,26,0,26,46,53,76,0,0,0,0,26,26,78,87,10,28,67,64,29,72,1,16,20,21,27,28,29,30,31,32,33,34,35,36,37,42,43,44,92,93,59,83,30,3,5,3,5,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,122,131,129,127,27,117,111,28,29,136,119,120,30,134,31,135,32,110,133,33,125,34,118,112,35,36,126,113,124,123,130,115,121,128,37,114,116,132,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,3,5,58,281,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,122,131,129,127,27,117,111,28,29,136,119,120,30,134,31,135,32,110,133,33,125,34,118,112,35,36,126,113,124,123,130,115,121,128,37,114,116,132,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,3,5,58,281,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,52,42,43,51,52,70,80,89,18,24,0,11,32,77,88,0,0,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,3,5,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,3,5,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,9,10,67,20,42,43,44,51,52,70,93,40,40,44,86,0,0,21,40,45,65,43,44,14,59,16,30,93,89,77,79,84,86,87,88,90,24,9,9,10,38,39,15,43,44,68,69,9,10,38,39,29,31,32,35,37,0,91,16,23,25,9,9,9,10,38,39,3,5,78,45,8,1,2,9,9,9,9,9,9,9,10,11,12,13,13,13,13,14,15,16,17,17,17,18,19,20,21,22,23,24,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,122,131,129,127,27,117,111,28,29,136,119,120,30,134,31,135,32,110,133,33,125,34,118,112,35,36,126,113,124,123,130,115,121,128,37,114,116,132,38,38,38,38,39,39,40,41,41,41,41,42,43,43,44,45,46,46,46,47,48,49,50,50,50,51,52,53,53,53,53,53,53,53,53,54,55,56,57,3,3,5,5,58,281,59,60,61,62,63,63,64,64,65,66,67,68,69,70,71,72,73,74,75,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,28,21,68,69,70,63,31,79,40,45,67,72,9,10,38,39,10,16,20,21,43,44,64,68,69,70,80,74,32,39,71,78,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,122,131,129,127,27,117,111,28,29,136,119,120,30,134,31,135,32,110,133,33,125,34,118,112,35,36,126,113,124,123,130,115,121,128,37,114,116,132,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,3,5,58,281,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,17,17,17,17,65,63,65,17,17,63,27,17,77,42,51,87,40,45,47,52,78,40,33,40,45,67,72,34,82,40,30,0,11,47,20,86,87,91,92,93,18,9,10,42,53,54,55,56,57,3,5,58,9,27,37,71,78,40,19,28,35,47,71,74,78,84,90,0,0,0,9,10,13,14,15,16,18,19,21,26,33,34,36,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,54,55,56,57,3,5,58,59,61,62,63,64,66,67,71,73,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,0,9,11,14,11,14,59,59,11,0,63,20,11,14,11,0,0,0,20,54,9,10,11,13,14,15,36,47,59,74,85,72,11,49,74,0,36,85,63,13,13,13,27,63,23,77,9,10,53,54,55,56,57,3,5,58,8,1,2,9,9,9,10,10,11,13,14,15,16,17,18,19,20,21,26,122,131,129,127,27,117,111,28,29,136,119,120,30,134,31,135,32,110,133,33,125,34,118,112,35,36,126,113,124,123,130,115,121,128,37,114,116,132,38,38,39,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,53,54,54,55,55,56,56,57,57,3,3,5,5,58,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,39,58,0,40,86,23,11,53,54,55,56,57,3,5,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,3,5,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,9,10,3,5,8,1,2,9,10,11,13,14,15,16,17,18,19,20,21,26,122,131,129,127,27,117,111,28,29,136,119,120,30,134,31,135,32,110,133,33,125,34,118,112,35,36,126,113,124,123,130,115,121,128,37,114,116,132,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,3,5,58,59,61,62,63,64,65,66,67,68,69,70,71,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,0,54,55,56,57,3,5,58,14,59,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,122,131,129,127,27,117,111,28,29,136,119,120,30,134,31,135,32,110,133,33,125,34,118,112,35,36,126,113,124,123,130,115,121,128,37,114,116,132,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,3,5,58,281,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,122,131,129,127,27,117,111,28,29,136,119,120,30,134,31,135,32,110,133,33,125,34,118,112,35,36,126,113,124,123,130,115,121,128,37,114,116,132,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,3,5,58,281,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,20,29,44,68,72,92,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,122,131,129,127,27,117,111,28,29,136,119,120,30,134,31,135,32,110,133,33,125,34,118,112,35,36,126,113,124,123,130,115,121,128,37,114,116,132,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,3,5,58,281,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,40,40,81,25,19,9,78,54,55,56,57,58,15,58,69,78,24,20,21,40,49,76,80,89,94,0,0,158,158,159,158,159,159,159,159,159,159,159,158,159,159,159,158,159,159,159,158,158,159,159,159,159,159,159,158,159,158,159,158,159,0,282,282,282,0,163,163,163,163,163,163,163,0,163,163,163,163,163,6,0,0,0,6,152,0,0,0,0,0,0,0,166,164,168,166,167,172,164,168,166,167,172,166,164,167,164,167,164,166,167,0,166,168,166,167,164,164,164,166,166,166,164,164,168,166,167,172,164,168,166,167,172,164,164,164,166,166,164,164,149,166,152,172,152,166,152,166,168,166,166,166,164,166,166,164,164,167,164,166,164,168,166,167,172,164,168,166,167,172,164,168,166,167,172,0,0,283,284,180,0,0,0,0,0,0,0,0,180,173,177,182,178,179,142,143,180,173,177,182,178,179,142,143,180,173,173,177,178,179,142,180,173,173,177,178,179,142,180,180,173,173,173,173,173,173,173,177,182,178,179,142,143,180,173,173,173,173,173,173,177,182,178,179,142,143,180,173,173,173,177,182,178,179,142,143,173,180,180,173,173,173,173,173,173,177,182,178,179,142,143,173,180,177,182,178,179,142,143,177,182,178,179,142,143,173,173,173,173,173,173,173,173,180,180,173,173,173,177,182,178,179,142,143,173,180,173,177,178,179,142,180,173,180,173,173,177,182,178,179,142,143,180,173,177,182,178,179,142,143,180,173,177,182,178,179,142,143,180,180,180,0,285,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,109,185,186,187,188,189,190,191,192,193,194,105,195,196,197,198,199,106,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,107,104,218,219,108,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,184,109,185,186,187,188,189,190,191,192,193,194,105,195,196,197,198,199,106,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,107,104,218,219,108,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,184,109,185,186,187,188,189,190,191,192,193,194,105,195,196,197,198,199,106,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,107,104,218,219,108,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,184,109,185,186,187,188,189,190,191,192,193,194,105,195,196,197,198,199,106,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,107,104,218,219,108,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,184,109,185,186,187,188,189,190,191,192,193,194,105,195,196,197,198,199,106,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,107,104,218,219,108,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,109,232,235,236,238,239,240,241,245,249,252,253,256,257,261,263,265,266,268,273,275,277,109,232,235,236,238,239,240,241,245,249,252,253,256,257,261,263,265,266,268,273,275,277,184,109,185,186,187,188,189,190,191,192,193,194,105,195,196,197,198,199,106,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,107,104,218,219,108,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,184,109,185,186,187,188,189,190,191,192,193,194,105,195,196,197,198,199,106,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,107,104,218,219,108,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,109,185,186,187,188,189,190,191,192,193,194,105,195,196,197,198,199,106,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,107,104,218,219,108,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,109,185,186,187,188,189,190,191,192,193,194,105,195,196,197,198,199,106,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,107,104,218,219,108,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,184,185,186,187,188,189,190,191,192,193,194,105,195,196,197,198,199,106,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,107,104,218,219,108,220,221,222,223,224,225,226,227,228,229,230,231,278,279,280,109,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,184,278,279,280,184,109,185,186,187,188,189,190,191,192,193,194,105,195,196,197,198,199,106,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,107,104,218,219,108,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,109,185,186,187,188,189,190,191,192,193,194,105,195,196,197,198,199,106,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,107,104,218,219,108,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,184,109,185,186,187,188,189,190,191,192,193,194,105,195,196,197,198,199,106,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,107,104,218,219,108,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,184,109,185,186,187,188,189,190,191,192,193,194,105,195,196,197,198,199,106,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,107,104,218,219,108,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,184,109,185,186,187,188,189,190,191,192,193,194,105,195,196,197,198,199,106,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,107,104,218,219,108,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280],"fc":[],"p":[[3,"TypeGenerics",0],[3,"Turbofish",0],[3,"LitInt",0],[15,"str"],[3,"LitFloat",0],[6,"Result",2142],[8,"FromStr",4091],[3,"ImplGenerics",0],[3,"Ident",0],[3,"Lifetime",0],[3,"Attribute",0],[4,"AttrStyle",0],[4,"Meta",0],[3,"MetaList",0],[3,"MetaNameValue",0],[3,"Variant",0],[4,"Fields",0],[3,"FieldsNamed",0],[3,"FieldsUnnamed",0],[3,"Field",0],[3,"DeriveInput",0],[4,"Data",0],[3,"DataStruct",0],[3,"DataEnum",0],[3,"DataUnion",0],[4,"Expr",0],[3,"ExprBinary",0],[3,"ExprCall",0],[3,"ExprCast",0],[3,"ExprField",0],[3,"ExprGroup",0],[3,"ExprIndex",0],[3,"ExprLit",0],[3,"ExprMacro",0],[3,"ExprParen",0],[3,"ExprPath",0],[3,"ExprUnary",0],[4,"Member",0],[3,"Index",0],[3,"Generics",0],[4,"GenericParam",0],[3,"LifetimeParam",0],[3,"TypeParam",0],[3,"ConstParam",0],[3,"BoundLifetimes",0],[4,"TypeParamBound",0],[3,"TraitBound",0],[4,"TraitBoundModifier",0],[3,"WhereClause",0],[4,"WherePredicate",0],[3,"PredicateLifetime",0],[3,"PredicateType",0],[4,"Lit",0],[3,"LitStr",0],[3,"LitByteStr",0],[3,"LitByte",0],[3,"LitChar",0],[3,"LitBool",0],[3,"Macro",0],[4,"MacroDelimiter",0],[4,"BinOp",0],[4,"UnOp",0],[3,"Path",0],[3,"PathSegment",0],[4,"PathArguments",0],[4,"GenericArgument",0],[3,"AngleBracketedGenericArguments",0],[3,"AssocType",0],[3,"AssocConst",0],[3,"Constraint",0],[3,"ParenthesizedGenericArguments",0],[3,"QSelf",0],[4,"Visibility",0],[3,"VisRestricted",0],[4,"FieldMutability",0],[4,"Type",0],[3,"TypeArray",0],[3,"TypeBareFn",0],[3,"TypeGroup",0],[3,"TypeImplTrait",0],[3,"TypeInfer",0],[3,"TypeMacro",0],[3,"TypeNever",0],[3,"TypeParen",0],[3,"TypePath",0],[3,"TypePtr",0],[3,"TypeReference",0],[3,"TypeSlice",0],[3,"TypeTraitObject",0],[3,"TypeTuple",0],[3,"Abi",0],[3,"BareFnArg",0],[3,"BareVariadic",0],[4,"ReturnType",0],[15,"tuple"],[4,"Ordering",4092],[15,"bool"],[8,"AsRef",4093],[8,"Sized",4094],[3,"Formatter",4095],[3,"Error",4095],[4,"Result",4096],[6,"Result",4095],[3,"SelfValue",2406],[3,"Crate",2406],[3,"Extern",2406],[3,"SelfType",2406],[3,"Super",2406],[3,"Underscore",2406],[3,"ExprInfer",0],[3,"ExprBreak",0],[3,"ExprMethodCall",0],[3,"ExprReference",0],[3,"ExprUnsafe",0],[3,"ExprTry",0],[3,"ExprWhile",0],[3,"ExprBlock",0],[3,"ExprMatch",0],[3,"ExprConst",0],[3,"ExprContinue",0],[3,"ExprTryBlock",0],[3,"ExprArray",0],[3,"ExprReturn",0],[3,"ExprRepeat",0],[3,"ExprLoop",0],[3,"ExprRange",0],[3,"ExprAwait",0],[3,"ExprTuple",0],[3,"ExprAsync",0],[3,"ExprStruct",0],[3,"ExprAssign",0],[3,"ExprYield",0],[3,"ExprLet",0],[3,"ExprForLoop",0],[3,"ExprIf",0],[3,"ExprClosure",0],[15,"usize"],[3,"Literal",4097],[8,"Into",4093],[4,"Option",4098],[8,"Hasher",4099],[3,"Iter",2242],[3,"IterMut",2242],[3,"Span",4097],[15,"u8"],[15,"slice"],[15,"char"],[3,"TokenStream",4100],[8,"Parse",2142],[6,"ParseStream",2142],[3,"TokenStream",4097],[8,"Parser",2142],[3,"Vec",4101],[8,"FnMut",4102],[3,"DelimSpan",4103],[3,"String",4104],[3,"TypeId",4105],[3,"TokenBuffer",2089],[3,"Cursor",2089],[4,"Delimiter",4097],[3,"Punct",4097],[4,"TokenTree",4097],[3,"ParseNestedMeta",2128],[3,"Error",2142],[8,"Display",4095],[3,"ParseBuffer",2142],[3,"StepCursor",2142],[3,"Lookahead1",2142],[8,"IntoIterator",4106],[3,"LexError",4097],[8,"ToTokens",4107],[3,"Nothing",2142],[3,"Punctuated",2242],[8,"Peek",2142],[8,"FnOnce",4102],[8,"Clone",4108],[3,"Pairs",2242],[3,"IntoPairs",2242],[3,"IntoIter",2242],[4,"Pair",2242],[8,"Default",4109],[3,"PairsMut",2242],[8,"Token",2406],[3,"Group",2406],[3,"Abstract",2406],[3,"As",2406],[3,"Async",2406],[3,"Auto",2406],[3,"Await",2406],[3,"Become",2406],[3,"Box",2406],[3,"Break",2406],[3,"Const",2406],[3,"Continue",2406],[3,"Default",2406],[3,"Do",2406],[3,"Dyn",2406],[3,"Else",2406],[3,"Enum",2406],[3,"Final",2406],[3,"Fn",2406],[3,"For",2406],[3,"If",2406],[3,"Impl",2406],[3,"In",2406],[3,"Let",2406],[3,"Loop",2406],[3,"Macro",2406],[3,"Match",2406],[3,"Mod",2406],[3,"Move",2406],[3,"Mut",2406],[3,"Override",2406],[3,"Priv",2406],[3,"Pub",2406],[3,"Ref",2406],[3,"Return",2406],[3,"Static",2406],[3,"Struct",2406],[3,"Trait",2406],[3,"Try",2406],[3,"Type",2406],[3,"Typeof",2406],[3,"Union",2406],[3,"Unsafe",2406],[3,"Unsized",2406],[3,"Use",2406],[3,"Virtual",2406],[3,"Where",2406],[3,"While",2406],[3,"Yield",2406],[3,"And",2406],[3,"AndAnd",2406],[3,"AndEq",2406],[3,"At",2406],[3,"Caret",2406],[3,"CaretEq",2406],[3,"Colon",2406],[3,"Comma",2406],[3,"Dollar",2406],[3,"Dot",2406],[3,"DotDot",2406],[3,"DotDotDot",2406],[3,"DotDotEq",2406],[3,"Eq",2406],[3,"EqEq",2406],[3,"FatArrow",2406],[3,"Ge",2406],[3,"Gt",2406],[3,"LArrow",2406],[3,"Le",2406],[3,"Lt",2406],[3,"Minus",2406],[3,"MinusEq",2406],[3,"Ne",2406],[3,"Not",2406],[3,"Or",2406],[3,"OrEq",2406],[3,"OrOr",2406],[3,"PathSep",2406],[3,"Percent",2406],[3,"PercentEq",2406],[3,"Plus",2406],[3,"PlusEq",2406],[3,"Pound",2406],[3,"Question",2406],[3,"RArrow",2406],[3,"Semi",2406],[3,"Shl",2406],[3,"ShlEq",2406],[3,"Shr",2406],[3,"ShrEq",2406],[3,"Slash",2406],[3,"SlashEq",2406],[3,"Star",2406],[3,"StarEq",2406],[3,"Tilde",2406],[3,"Brace",2406],[3,"Bracket",2406],[3,"Paren",2406],[4,"StrStyle",0],[8,"IdentExt",2124],[8,"Speculative",2238],[8,"AnyDelimiter",2238],[8,"Spanned",2404]]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":"FF","n":["is_xid_continue","is_xid_start"],"q":[[0,"unicode_ident"]],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"c":[],"p":[[15,"char"],[15,"bool"]]},\
"yansi":{"doc":"A dead simple ANSI terminal color painting library.","t":"SENNNNNNNNNNNNNNENDNSNNNNNNNNSNIDNENNNNDNNNNLKLLLLLLLLLLMKLLLLLLLLLKLLLLLLLLKLLLLLLLLLKLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLLLLKLLLLLLLLKLLLLLLLLKLLLLLLLLKLLLLLLLLKLLLLLLLLKLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLMKLLLLLLLLLLLLKLLLLLLLLLFFLLLLLLLLLLLKLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLKLLLLLLLLLFKLLLLLLLLLKLLLLLLLLLKLLLLLLLLKLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLKLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLKLLLLLLLLKLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLMFKLLLLLLLLLKLLLLLLLLKLLLLLLLLLKLLLLLLLL","n":["ALWAYS","Attribute","Black","Blink","Blue","Bold","Bright","BrightBlack","BrightBlue","BrightCyan","BrightGreen","BrightMagenta","BrightRed","BrightWhite","BrightYellow","Clear","Color","Conceal","Condition","Cyan","DEFAULT","Dim","Fixed","Green","Invert","Italic","Linger","Magenta","Mask","NEVER","OnBright","Paint","Painted","Primary","Quirk","RapidBlink","Red","Rgb","Strike","Style","Underline","White","Wrap","Yellow","always","attr","attr","attr","attr","attr","attr","attr","attr","attr","attr","background","background","bg","bg","bg","bg","bg","bg","bg","bg","bg","bg","black","black","black","black","black","black","black","black","black","blink","blink","blink","blink","blink","blink","blink","blink","blink","blink","blue","blue","blue","blue","blue","blue","blue","blue","blue","bold","bold","bold","bold","bold","bold","bold","bold","bold","bold","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bright","bright","bright","bright","bright","bright","bright","bright","bright","bright","bright_black","bright_black","bright_black","bright_black","bright_black","bright_black","bright_black","bright_black","bright_black","bright_blue","bright_blue","bright_blue","bright_blue","bright_blue","bright_blue","bright_blue","bright_blue","bright_blue","bright_cyan","bright_cyan","bright_cyan","bright_cyan","bright_cyan","bright_cyan","bright_cyan","bright_cyan","bright_cyan","bright_green","bright_green","bright_green","bright_green","bright_green","bright_green","bright_green","bright_green","bright_green","bright_magenta","bright_magenta","bright_magenta","bright_magenta","bright_magenta","bright_magenta","bright_magenta","bright_magenta","bright_magenta","bright_red","bright_red","bright_red","bright_red","bright_red","bright_red","bright_red","bright_red","bright_red","bright_white","bright_white","bright_white","bright_white","bright_white","bright_white","bright_white","bright_white","bright_white","bright_yellow","bright_yellow","bright_yellow","bright_yellow","bright_yellow","bright_yellow","bright_yellow","bright_yellow","bright_yellow","cached","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","conceal","conceal","conceal","conceal","conceal","conceal","conceal","conceal","conceal","conceal","condition","cyan","cyan","cyan","cyan","cyan","cyan","cyan","cyan","cyan","default","default","default","deref","dim","dim","dim","dim","dim","dim","dim","dim","dim","dim","disable","enable","enabled","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fg","fg","fg","fg","fg","fg","fg","fg","fg","fixed","fixed","fixed","fixed","fixed","fixed","fixed","fixed","fixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_prefix","fmt_suffix","foreground","foreground","from","from","from","from","from","from","from","from","from","from","from","green","green","green","green","green","green","green","green","green","hash","hash","hash","hash","hash","into","into","into","into","into","into","invert","invert","invert","invert","invert","invert","invert","invert","invert","invert","is_enabled","italic","italic","italic","italic","italic","italic","italic","italic","italic","italic","linger","linger","linger","linger","linger","linger","linger","linger","linger","linger","magenta","magenta","magenta","magenta","magenta","magenta","magenta","magenta","magenta","mask","mask","mask","mask","mask","mask","mask","mask","mask","mask","never","new","new","new","new","on_black","on_black","on_black","on_black","on_black","on_black","on_black","on_black","on_black","on_black","on_blue","on_blue","on_blue","on_blue","on_blue","on_blue","on_blue","on_blue","on_blue","on_blue","on_bright","on_bright","on_bright","on_bright","on_bright","on_bright","on_bright","on_bright","on_bright","on_bright","on_bright_black","on_bright_black","on_bright_black","on_bright_black","on_bright_black","on_bright_black","on_bright_black","on_bright_black","on_bright_black","on_bright_black","on_bright_blue","on_bright_blue","on_bright_blue","on_bright_blue","on_bright_blue","on_bright_blue","on_bright_blue","on_bright_blue","on_bright_blue","on_bright_blue","on_bright_cyan","on_bright_cyan","on_bright_cyan","on_bright_cyan","on_bright_cyan","on_bright_cyan","on_bright_cyan","on_bright_cyan","on_bright_cyan","on_bright_cyan","on_bright_green","on_bright_green","on_bright_green","on_bright_green","on_bright_green","on_bright_green","on_bright_green","on_bright_green","on_bright_green","on_bright_green","on_bright_magenta","on_bright_magenta","on_bright_magenta","on_bright_magenta","on_bright_magenta","on_bright_magenta","on_bright_magenta","on_bright_magenta","on_bright_magenta","on_bright_magenta","on_bright_red","on_bright_red","on_bright_red","on_bright_red","on_bright_red","on_bright_red","on_bright_red","on_bright_red","on_bright_red","on_bright_red","on_bright_white","on_bright_white","on_bright_white","on_bright_white","on_bright_white","on_bright_white","on_bright_white","on_bright_white","on_bright_white","on_bright_white","on_bright_yellow","on_bright_yellow","on_bright_yellow","on_bright_yellow","on_bright_yellow","on_bright_yellow","on_bright_yellow","on_bright_yellow","on_bright_yellow","on_bright_yellow","on_cyan","on_cyan","on_cyan","on_cyan","on_cyan","on_cyan","on_cyan","on_cyan","on_cyan","on_cyan","on_fixed","on_fixed","on_fixed","on_fixed","on_fixed","on_fixed","on_fixed","on_fixed","on_fixed","on_fixed","on_green","on_green","on_green","on_green","on_green","on_green","on_green","on_green","on_green","on_green","on_magenta","on_magenta","on_magenta","on_magenta","on_magenta","on_magenta","on_magenta","on_magenta","on_magenta","on_magenta","on_primary","on_primary","on_primary","on_primary","on_primary","on_primary","on_primary","on_primary","on_primary","on_primary","on_red","on_red","on_red","on_red","on_red","on_red","on_red","on_red","on_red","on_red","on_rgb","on_rgb","on_rgb","on_rgb","on_rgb","on_rgb","on_rgb","on_rgb","on_rgb","on_rgb","on_white","on_white","on_white","on_white","on_white","on_white","on_white","on_white","on_white","on_white","on_yellow","on_yellow","on_yellow","on_yellow","on_yellow","on_yellow","on_yellow","on_yellow","on_yellow","on_yellow","os_support","paint","paint","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","prefix","primary","primary","primary","primary","primary","primary","primary","primary","primary","quirk","quirk","quirk","quirk","quirk","quirk","quirk","quirk","quirk","quirk","rapid_blink","rapid_blink","rapid_blink","rapid_blink","rapid_blink","rapid_blink","rapid_blink","rapid_blink","rapid_blink","rapid_blink","red","red","red","red","red","red","red","red","red","rgb","rgb","rgb","rgb","rgb","rgb","rgb","rgb","rgb","strike","strike","strike","strike","strike","strike","strike","strike","strike","strike","style","style","style","suffix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","underline","underline","underline","underline","underline","underline","underline","underline","underline","underline","value","whenever","whenever","whenever","whenever","whenever","whenever","whenever","whenever","whenever","whenever","whenever","white","white","white","white","white","white","white","white","white","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","yellow","yellow","yellow","yellow","yellow","yellow","yellow","yellow","yellow"],"q":[[0,"yansi"],[741,"core::clone"],[742,"core::cmp"],[743,"core::fmt"],[744,"core::fmt"],[745,"core::marker"],[746,"core::convert"],[747,"core::option"],[748,"alloc::borrow"],[749,"alloc::string"],[750,"core::result"],[751,"core::any"]],"d":["A condition that always evaluates to <code>true</code>.","Enum representing text attributes, largely for text …","Black #0 (foreground code <code>30</code>, background code <code>40</code>).","Blink.","Blue: #4 (foreground code <code>34</code>, background code <code>44</code>).","Makes text bold.","Brighten the foreground color if it is not already bright.","Bright Black #0 (foreground code <code>90</code>, background code <code>100</code>).","Bright Blue: #4 (foreground code <code>94</code>, background code <code>104</code>).","Bright Cyan: #6 (foreground code <code>96</code>, background code <code>106</code>).","Bright Green: #2 (foreground code <code>92</code>, background code <code>102</code>).","Bright Magenta: #5 (foreground code <code>95</code>, background code <code>105</code>…","Bright Red #1 (foreground code <code>91</code>, background code <code>101</code>).","Bright White: #7 (foreground code <code>97</code>, background code <code>107</code>).","Bright Yellow: #3 (foreground code <code>93</code>, background code <code>103</code>…","Always clear styling afterwards, even if no actual styling …","Enum representing a terminal color.","Conceal text.","A function that decides whether styling should be applied.","Cyan: #6 (foreground code <code>36</code>, background code <code>46</code>).","A condition that evaluates to <code>true</code> if the OS supports …","Makes text dim.","A color from 0 to 255, for use in 256-color terminals.","Green: #2 (foreground code <code>32</code>, background code <code>42</code>).","Invert (flip) the foreground and background colors.","Display text in italics.","Linger: do not clear the style after it is applied.","Magenta: #5 (foreground code <code>35</code>, background code <code>45</code>).","Mask: omit when painting is disabled.","A condition that always evaluated to <code>false</code>.","Brighten the background color if it is not already bright.","A trait to apply styling to any value, implemented for all …","An arbitrary value with a <code>Style</code> applied to it.","Terminal primary color #9. (foreground code <code>39</code>, background …","Enum representing a <code>yansi</code> quirk.","Blink rapidly.","Red #1 (foreground code <code>31</code>, background code <code>41</code>).","A 24-bit R G B “true color”, as specified by …","Display text with a strike through it.","A set of styling options.","Underline text.","White: #7 (foreground code <code>37</code>, background code <code>47</code>).","Wrap the value: replace resets with the wrapped styling.","Yellow: #3 (foreground code <code>33</code>, background code <code>43</code>).","The backing function for <code>Condition::ALWAYS</code>. Returns <code>true</code> …","Enables the styling <code>Attribute</code> <code>value</code>.","Enables the styling <code>Attribute</code> <code>value</code>.","Enables the styling <code>Attribute</code> <code>value</code>.","Enables the styling <code>Attribute</code> <code>value</code>.","Enables the styling <code>Attribute</code> <code>value</code>.","Enables the styling <code>Attribute</code> <code>value</code>.","Enables the styling <code>Attribute</code> <code>value</code>.","Enables the styling <code>Attribute</code> <code>value</code>.","Enables the styling <code>Attribute</code> <code>value</code>.","Enables the styling <code>Attribute</code> <code>value</code>.","Returns a <code>Style</code> with a background color of <code>self</code>.","The background color. Defaults to <code>None</code>.","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","","","","","","","","","","","","","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.","Creates a condition that is <code>ALWAYS</code> when <code>value</code> is <code>true</code> and …","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","","","","","","","","","","","","","","","","","","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","The condition.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.","","","","","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","Unconditionally disables styling globally.","Unconditionally enables styling globally.","Returns <code>true</code> if this style is enabled, based on <code>condition</code>.","","","","","","","","","","","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns a styled value derived from <code>self</code> with the …","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.","","","","","","","","","","","","","","","Writes the ANSI code prefix for the currently set styles.","Writes the ANSI code sequence suffix for the style.","Returns a <code>Style</code> with a foreground color of <code>self</code>.","The foreground color. Defaults to <code>None</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a dynamically checked condition from a function <code>f</code>.","Returns the argument unchanged.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>true</code> if styling is globally enabled and <code>false</code> …","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","The backing function for <code>Condition::NEVER</code>. Returns <code>false</code> …","Create a new <code>Painted</code> with a default <code>Style</code>.","Create a new <code>Painted</code> with a default <code>Style</code>.","Returns a new style with no foreground or background, no …","Create a new <code>Painted</code> with a default <code>Style</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","The backing function for <code>Condition::DEFAULT</code>.","Apply a style wholesale to <code>self</code>. Any previous style is …","Apply a style wholesale to <code>self</code>. Any previous style is …","","","","","","Returns the ANSI code sequence prefix for the style as a …","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","Returns a <code>Style</code> with the attribute <code>self</code> enabled.","Returns a <code>Style</code> with the quirk <code>self</code> enabled.","The style to apply.","Returns the ANSI code sequence suffix for the style as a …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","The value to be styled.","Dynamically enables styling globally based on <code>condition</code>.","Conditionally enable styling based on whether the <code>Condition</code>…","Conditionally enable styling based on whether the <code>Condition</code>…","Conditionally enable styling based on whether the <code>Condition</code>…","Conditionally enable styling based on whether the <code>Condition</code>…","Conditionally enable styling based on whether the <code>Condition</code>…","Conditionally enable styling based on whether the <code>Condition</code>…","Conditionally enable styling based on whether the <code>Condition</code>…","Conditionally enable styling based on whether the <code>Condition</code>…","Conditionally enable styling based on whether the <code>Condition</code>…","Conditionally enable styling based on whether the <code>Condition</code>…","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>."],"i":[6,0,5,2,5,2,7,5,5,5,5,5,5,5,5,7,0,2,0,5,6,2,5,5,2,2,7,5,7,6,7,0,0,5,0,2,5,5,2,0,2,5,7,5,6,33,2,7,4,4,5,5,3,3,6,5,4,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,3,3,6,33,2,7,4,4,5,5,3,3,6,2,7,4,5,3,6,2,7,4,5,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,3,3,6,33,2,7,4,4,5,3,3,6,33,2,7,4,4,5,3,3,6,33,2,7,4,4,5,3,3,6,33,2,7,4,4,5,3,3,6,33,2,7,4,4,5,3,3,6,33,2,7,4,4,5,3,3,6,33,2,7,4,4,5,3,3,6,6,33,2,7,4,4,5,5,3,3,6,2,7,4,5,3,6,2,7,4,5,3,6,2,7,4,5,6,33,2,7,4,4,5,5,3,3,6,4,33,2,7,4,4,5,3,3,6,4,5,6,6,33,2,7,4,4,5,5,3,3,6,0,0,4,2,7,4,5,6,2,7,4,5,6,33,2,7,4,4,5,3,3,6,33,2,7,4,4,5,3,3,6,2,7,4,5,3,3,3,3,3,3,3,3,3,6,4,4,5,4,2,7,4,4,4,4,4,5,3,6,6,33,2,7,4,4,5,3,3,6,2,7,4,5,6,2,7,4,5,3,6,33,2,7,4,4,5,5,3,3,6,0,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,3,3,6,33,2,7,4,4,5,5,3,3,6,6,33,33,4,3,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,6,33,33,2,7,4,5,6,4,33,2,7,4,4,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,3,3,6,33,2,7,4,4,5,3,3,6,33,2,7,4,4,5,5,3,3,6,2,7,3,4,2,7,4,5,3,6,3,2,7,4,5,3,6,2,7,4,5,3,6,2,7,4,5,3,6,33,2,7,4,4,5,5,3,3,6,3,0,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,3,3,6,33,2,7,4,4,5,5,3,3,6,33,2,7,4,4,5,3,3,6],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[-1,2],[[3,[-1]]],[]],[[-1,2],[[3,[-2]]],[],[]],[[-1,2],[[3,[-2]]],[],[]],[[-1,2],[[3,[-2]]],[],[]],[[4,2],4],[[-1,2],[[3,[-2]]],[],[]],[[5,2],4],[[-1,2],[[3,[-2]]],[],[]],[[[3,[-1]],2],[[3,[-1]]],[]],[[-1,2],[[3,[-2]]],[],[]],[5,4],0,[[-1,5],[[3,[-1]]],[]],[[-1,5],[[3,[-2]]],[],[]],[[-1,5],[[3,[-2]]],[],[]],[[-1,5],[[3,[-2]]],[],[]],[[4,5],4],[[5,5],4],[[-1,5],[[3,[-2]]],[],[]],[[-1,5],[[3,[-2]]],[],[]],[[[3,[-1]],5],[[3,[-1]]],[]],[[-1,5],[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[5,4],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[5,4],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[5,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[1,6],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[5,4],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[2,2],[7,7],[4,4],[5,5],[[[3,[-1]]],[[3,[-1]]],8],[6,6],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[2,2],10],[[7,7],10],[[4,4],10],[[5,5],10],[[6,6],10],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[5,4],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],0,[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[[],4],[[],5],[[],6],[6],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[5,4],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[],9],[[],9],[4,1],[[2,2],1],[[7,7],1],[[4,4],1],[[5,5],1],[[6,6],1],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,5],[[3,[-1]]],[]],[[-1,5],[[3,[-2]]],[],[]],[[-1,5],[[3,[-2]]],[],[]],[[-1,5],[[3,[-2]]],[],[]],[[4,5],4],[[-1,5],[[3,[-2]]],[],[]],[[-1,5],[[3,[-2]]],[],[]],[[[3,[-1]],5],[[3,[-1]]],[]],[[-1,5],[[3,[-2]]],[],[]],[[-1,11],[[3,[-1]]],[]],[[-1,11],[[3,[-2]]],[],[]],[[-1,11],[[3,[-2]]],[],[]],[[4,11],4],[[-1,11],[[3,[-2]]],[],[]],[[-1,11],[[3,[-2]]],[],[]],[[[3,[-1]],11],[[3,[-1]]],[]],[[-1,11],[[3,[-2]]],[],[]],[[-1,11],[[3,[-2]]],[],[]],[[2,12],13],[[7,12],13],[[4,12],13],[[5,12],13],[[[3,[-1]],12],13,14],[[[3,[-1]],12],13,15],[[[3,[-1]],12],13,16],[[[3,[-1]],12],13,17],[[[3,[-1]],12],13,18],[[[3,[-1]],12],13,19],[[[3,[-1]],12],13,20],[[[3,[-1]],12],13,21],[[[3,[-1]],12],13,22],[[6,12],13],[[4,23],13],[[4,23],13],[5,4],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[3,[-1]]],4,[]],[5,4],[2,4],[7,4],[-1,-1,[]],[-1,-1,[]],[[],6],[-1,-1,[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[2,-1],9,24],[[7,-1],9,24],[[4,-1],9,24],[[5,-1],9,24],[[6,-1],9,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[5,4],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[],1],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[5,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[5,4],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[5,4],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[],1],[-1,[[3,[-1]]],25],[-1,[[3,[-1]]],25],[[],4],[-1,[[3,[-1]]],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[5,4],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[5,4],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[5,4],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[5,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[5,4],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[5,4],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[5,4],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[5,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[5,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[5,4],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[5,4],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[5,4],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[-1,11],[[3,[-1]]],[]],[[-1,11],[[3,[-2]]],[],[]],[[-1,11],[[3,[-2]]],[],[]],[[-1,11],[[3,[-2]]],[],[]],[[4,11],4],[[-1,11],[[3,[-2]]],[],[]],[[5,11],4],[[[3,[-1]],11],[[3,[-1]]],[]],[[-1,11],[[3,[-2]]],[],[]],[[-1,11],[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[5,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[5,4],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[5,4],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[5,4],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[[-1,11,11,11],[[3,[-1]]],[]],[[-1,11,11,11],[[3,[-2]]],[],[]],[[-1,11,11,11],[[3,[-2]]],[],[]],[[-1,11,11,11],[[3,[-2]]],[],[]],[[4,11,11,11],4],[[-1,11,11,11],[[3,[-2]]],[],[]],[[5,11,11,11],4],[[-1,11,11,11],[[3,[-2]]],[],[]],[[[3,[-1]],11,11,11],[[3,[-1]]],[]],[[-1,11,11,11],[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[5,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[5,4],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[],1],[[-1,-2],[[3,[-1]]],[],[[26,[4]]]],[[-1,-2],[[3,[-1]]],[],[[26,[4]]]],[[2,2],[[27,[10]]]],[[7,7],[[27,[10]]]],[[4,4],[[27,[10]]]],[[5,5],[[27,[10]]]],[[6,6],[[27,[10]]]],[4,[[29,[28]]]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[[-1,7],[[3,[-1]]],[]],[[-1,7],[[3,[-2]]],[],[]],[[-1,7],[[3,[-2]]],[],[]],[[4,7],4],[[-1,7],[[3,[-2]]],[],[]],[[-1,7],[[3,[-2]]],[],[]],[[5,7],4],[[-1,7],[[3,[-2]]],[],[]],[[[3,[-1]],7],[[3,[-1]]],[]],[[-1,7],[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[5,4],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[[-1,11,11,11],[[3,[-1]]],[]],[[-1,11,11,11],[[3,[-2]]],[],[]],[[-1,11,11,11],[[3,[-2]]],[],[]],[[4,11,11,11],4],[[-1,11,11,11],[[3,[-2]]],[],[]],[[-1,11,11,11],[[3,[-2]]],[],[]],[[[3,[-1]],11,11,11],[[3,[-1]]],[]],[[-1,11,11,11],[[3,[-2]]],[],[]],[[-1,11,11,11],[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[5,4],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[2,4],[7,4],0,[4,[[29,[28]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[5,4],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],0,[6,9],[[-1,6],[[3,[-1]]],[]],[[-1,6],[[3,[-2]]],[],[]],[[-1,6],[[3,[-2]]],[],[]],[[-1,6],[[3,[-2]]],[],[]],[[4,6],4],[[-1,6],[[3,[-2]]],[],[]],[[5,6],4],[[[3,[-1]],6],[[3,[-1]]],[]],[[-1,6],[[3,[-2]]],[],[]],[[-1,6],[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[5,4],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[4,4],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[3,[-1]]],[[3,[-1]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]]],"c":[],"p":[[15,"bool"],[4,"Attribute",0],[3,"Painted",0],[3,"Style",0],[4,"Color",0],[3,"Condition",0],[4,"Quirk",0],[8,"Clone",741],[15,"tuple"],[4,"Ordering",742],[15,"u8"],[3,"Formatter",743],[6,"Result",743],[8,"LowerExp",743],[8,"UpperHex",743],[8,"LowerHex",743],[8,"UpperExp",743],[8,"Octal",743],[8,"Pointer",743],[8,"Debug",743],[8,"Binary",743],[8,"Display",743],[8,"Write",743],[8,"Hasher",744],[8,"Sized",745],[8,"Into",746],[4,"Option",747],[15,"str"],[4,"Cow",748],[3,"String",749],[4,"Result",750],[3,"TypeId",751],[8,"Paint",0]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
